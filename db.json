{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/images/about/about1.jpg","path":"images/about/about1.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/images/back1.jpg","path":"images/back1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/back.jpg","path":"images/back.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/about/about2.jpg","path":"images/about/about2.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1551420085442},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1551420085442},{"_id":"themes/next/.DS_Store","hash":"ba627bd30dc00e36a3004bc0527d5b9a046929ef","modified":1551938229391},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1551420085442},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1551420085444},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1551420085444},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1551420085444},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1551420085444},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1551420085444},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1551420085444},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1551420085444},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1551420085444},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1551420085445},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1551420085445},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1551420085445},{"_id":"themes/next/_config.yml","hash":"953b99e45484abb3bbee2a8814be5d75769c755c","modified":1552026610709},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1551420085465},{"_id":"source/.DS_Store","hash":"8208dfa3ffc6424269c3b9ae9974555bbd21f96c","modified":1599573086504},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1551420085435},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1551420085432},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1551419950598},{"_id":"themes/next/.git/index","hash":"e5f350ca8b37bfa6d85513f5909ff7e96a51ba75","modified":1551942567741},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1551420085429},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1551420085442},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1551420085443},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1551420085443},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1551420085443},{"_id":"themes/next/layout/.DS_Store","hash":"b613bfc6be10ce8861ba7e18b02581306cfa2ab5","modified":1551938229393},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1551420085464},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1551420085464},{"_id":"themes/next/layout/_layout.swig","hash":"e1ea6fed0d25590d1f81470469f317f5523aace7","modified":1551689821226},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1551420085464},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1551420085464},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1551420085464},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1551420085464},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1551420085465},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1551420085465},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1551420085466},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1551420085445},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1551420085445},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1551420085446},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1551420085446},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1551420085446},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1551420085446},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1551420085446},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1551420085446},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1551420085446},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1551420085447},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1551420085447},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1551420085447},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1551420085447},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1551420085447},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1551420085448},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1551420085448},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1551420085527},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1551420085527},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1551420085527},{"_id":"themes/next/source/.DS_Store","hash":"0c1ff2e5998967129f79d978bfe661803178557e","modified":1551938372705},{"_id":"source/_posts/buildHexo.md","hash":"3b9049eb6aa1ceb9d6fac563a7e2217fbc7911e0","modified":1599186957146},{"_id":"source/_posts/element-admin.md","hash":"cdf8385cd3193b43991dbe477fa3c3f459638ac9","modified":1599632857420},{"_id":"source/_posts/.DS_Store","hash":"2eb0a16140fec60922217bcaced999a5c30f1f30","modified":1599572724579},{"_id":"source/_posts/grid.md","hash":"658c7476a33b46f7b859a225e52785d5156924e6","modified":1604839534088},{"_id":"source/_posts/eventLoop.md","hash":"4e3f4d29d0c73501ae4e0feadac02ffd36dbd765","modified":1599185723937},{"_id":"source/_posts/sTable.md","hash":"0dd5d3915ef29ee9583cb39cb85eaf4ba6511bfe","modified":1600591597041},{"_id":"source/_posts/koa.md","hash":"19f16e155137d760ab8c7e504948c0d57335a45a","modified":1599204696320},{"_id":"source/_posts/xiumi.md","hash":"037ecdf3a93e7ab16b6992368357c1fc3929fac0","modified":1599184422524},{"_id":"source/_posts/tryCatch.md","hash":"11e7fa4518f54d6f50c48e6c7d4d7d59cccd201e","modified":1599184854226},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1552134993198},{"_id":"source/_posts/mongo.md","hash":"5b75caddf87524933089cf950f4725c1c97c884c","modified":1599213605625},{"_id":"source/about/index.md","hash":"7b184b5fedbdacb233bc689b1fb0d79af1bbbb05","modified":1599192344408},{"_id":"source/categories/index.md","hash":"7c5ea8e41333365e1c73aef851fdb56d879ea8c7","modified":1552134993198},{"_id":"source/tags/index.md","hash":"7d1152b6fef82899722fb2c6f9954686d190219b","modified":1552134993208},{"_id":"source/images/.DS_Store","hash":"6860272214893d34d2b97f59897d4335f566e323","modified":1552989870217},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085484},{"_id":"themes/next/.git/logs/HEAD","hash":"cf53f33f66f76b941ee4f491f6ff2bc37f52db9d","modified":1551420085433},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1551419950597},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1551419950599},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1551419950598},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1551419950599},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1551419950601},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1551419950601},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1551419950599},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1551419950599},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1551419950600},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1551419950600},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1551419950601},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1551419950601},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1551420085449},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551420085448},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551420085448},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1551420085449},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1551420085449},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1551420085450},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1551420085450},{"_id":"themes/next/layout/_macro/post.swig","hash":"00ca04166bf1d867c0df9e87f47a29faf916eac8","modified":1599191299267},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1551420085450},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1551420085451},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1551420085452},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1551420085453},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1551420085453},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1551420085453},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1551686573216},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1551420085461},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"c72913a1145fd6aca2c107fee7ab1ea91b1ffbc3","modified":1551764012475},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1551420085461},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1551420085462},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1551420085461},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1551420085462},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1551420085462},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1551420085462},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1551420085456},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1551420085457},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1551420085456},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"1241444d8c554a07a1ac3049e41017da5554f3d9","modified":1551425709906},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1551420085466},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1551420085466},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1551420085466},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1551420085466},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1551420085467},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1551420085467},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1551420085467},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1551420085467},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1551420085467},{"_id":"themes/next/source/css/.DS_Store","hash":"184a176c55000912e27407574ccc9edb19847a4a","modified":1551938234397},{"_id":"themes/next/source/js/.DS_Store","hash":"2c2240891d5af57527c2e8cbc381a5b82fce0d8e","modified":1551430975684},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1551420085484},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551420085485},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551420085485},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551420085485},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551420085485},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551420085485},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551420085486},{"_id":"themes/next/source/images/.DS_Store","hash":"56004508320737f852f5e55876b6f2aab446f820","modified":1551773683687},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551420085486},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551420085486},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551420085486},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551420085486},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551420085487},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"a2edb92924a73dd507244960216e505f007edcae","modified":1551430504751},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551420085487},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"4abf1282dae4d25b652b4794fc42b0ae4fed8256","modified":1551430501718},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551420085487},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551420085487},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551420085488},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551420085488},{"_id":"source/_posts/buildHexo/hexo3.jpg","hash":"3980de090a77cedbb3c54b5d5bd3bd663314c897","modified":1552134993207},{"_id":"source/_posts/sTable/table1.png","hash":"299d40e091e215e99c0daa567b89e269b5933452","modified":1599633306806},{"_id":"source/_posts/sTable/table2.png","hash":"d8709b22d9506f2592b3d17f8cea4b533c563666","modified":1599633306831},{"_id":"source/images/about/.DS_Store","hash":"dfa56f640ed8a44aa88167c7eec760af7612eeb2","modified":1552134993199},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085457},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085457},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085480},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085480},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085480},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085484},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551420085484},{"_id":"source/_posts/buildHexo/hexo4.jpg","hash":"325bd5ff6a20b925766758df1cfb214e0193dc90","modified":1552134993208},{"_id":"source/_posts/element-admin/permission2.png","hash":"f8ca4496ef101403dd68facb760ee447e438f8bb","modified":1599578706205},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1551420085433},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551420085452},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1551420085452},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1551420085454},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1551420085454},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1551420085454},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1551420085454},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1551420085455},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1551420085455},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1551420085455},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1551420085460},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1551420085460},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1551420085460},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1551420085460},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1551420085460},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1551420085460},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1551420085461},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1551420085461},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1551420085461},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1551420085457},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1551420085458},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1551420085458},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1551420085458},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1551420085458},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1551420085458},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1551420085458},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1551420085459},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1551420085459},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1551420085459},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1551687061249},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1551420085459},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1551420085459},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1551420085463},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1551420085463},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1551420085463},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1551420085463},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1551420085456},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551420085457},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551420085457},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551420085488},{"_id":"themes/next/source/js/src/.DS_Store","hash":"cbdfef2baff2ab968d19fafc51acd78aa289cfcb","modified":1551430975687},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1551420085488},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551420085488},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1551430964837},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551420085489},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551420085489},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551420085489},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1551420085489},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551420085490},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551420085490},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1551420085490},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1551420085480},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1551420085480},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1551420085480},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a01d8ea67ec48213607225124593dd3271f79429","modified":1599186953658},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"bbcd4648e78e094c0cf1b2b340222b4a09c8b6d4","modified":1551687799012},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"2079d58ef04fc0096944e42220d5c0cecf230f1a","modified":1551687794010},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1551420085484},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1551420085484},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1551420085484},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1551420085484},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551420085494},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1551420085498},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1551420085501},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1551420085502},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1551420085502},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1551420085502},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1551420085503},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1551420085503},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1551420085503},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551420085503},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551420085503},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551420085498},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1551420085498},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1551420085498},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1551420085516},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1551420085517},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1551420085517},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1551420085516},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1551420085517},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1551420085517},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1551420085518},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1551420085518},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1551420085515},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1551420085518},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551420085518},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551420085518},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551420085519},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551420085520},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551420085520},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551420085520},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551420085520},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1551420085520},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1551420085521},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1551420085521},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1551420085521},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1551420085525},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1551420085525},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551420085526},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551420085526},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551420085527},{"_id":"source/_posts/buildHexo/hexo2.jpg","hash":"5f69638bf56af71c6c357eac4abc47fd7f3d8665","modified":1552134993207},{"_id":"source/_posts/xiumi/1599127298698.jpg","hash":"22f69e489603359b0734cd93df2321365ad13385","modified":1599127301971},{"_id":"source/images/about/about1.jpg","hash":"db82c7975b1f34f3c4c32e6fe89f8cdf9b711385","modified":1552134993200},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1551420085489},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551420085516},{"_id":"source/_posts/element-admin/permission1.png","hash":"623613fe6cce2b42980b2885eb37cfeb382e2935","modified":1599578302459},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"cf53f33f66f76b941ee4f491f6ff2bc37f52db9d","modified":1551420085434},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1551420085432},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1551420085463},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551420085463},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1551420085490},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1551420085468},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1551420085468},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1551420085468},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"fdabbf5a6ed27558e2987fc73c3f3ff953769896","modified":1599198941342},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1e0860b9fedd0c58c8595f033e828e53da19d1a3","modified":1599198911838},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"a2eb6916906bde7e2a99d75d6d5cd17df75eac83","modified":1551687811063},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1551420085475},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1551420085478},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1551420085479},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1551420085479},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1551420085479},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1551420085479},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1551420085479},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1551420085481},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1551420085481},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1551420085481},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"c547c3accbba482de094f09d48f9985d63f7e04f","modified":1599191697731},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1551420085481},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1551420085481},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1551420085481},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551420085481},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1551420085483},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1551420085483},{"_id":"themes/next/source/css/_schemes/Muse/.DS_Store","hash":"a71ab00855628742a103f230d43a351ba947f291","modified":1551687794009},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1551420085483},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1551420085483},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1551420085483},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1551420085483},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1551420085483},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1551420085493},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1551420085494},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1551420085494},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1551420085502},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551420085502},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551420085504},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551420085504},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551420085504},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551420085498},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551420085499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551420085499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551420085499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551420085499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551420085499},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1551420085501},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1551420085501},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1551420085501},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551420085524},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551420085524},{"_id":"source/_posts/buildHexo/hexo5.jpg","hash":"2af86e05016723482a1f434c5241c915ca7baaa1","modified":1599192021330},{"_id":"source/_posts/element-admin/permission.png","hash":"67f53c75712096677ae5da18058728c6300cc87f","modified":1599573045861},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1551420085493},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551420085514},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551420085515},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551420085526},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cf53f33f66f76b941ee4f491f6ff2bc37f52db9d","modified":1551420085432},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1551420085468},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1551420085469},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1551420085469},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1551420085469},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1551420085469},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1551420085469},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1551420085469},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1551420085468},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1551420085470},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1551420085471},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1551420085471},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1551420085471},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1551420085471},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1551420085471},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"04070a9d1ad76cd696afbba9840ee22504bae9e5","modified":1599185396285},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1551420085471},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1551420085472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1551420085473},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1551420085473},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1551420085473},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1551420085473},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1551420085473},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab652c467c88fc78ba970c738669e0ad681ccc91","modified":1551423326508},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1551420085474},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1551420085474},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1551420085474},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1551420085474},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1551420085474},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1551420085475},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1551420085475},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1551420085475},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1551420085475},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1551420085476},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1551420085476},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1551420085476},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1551420085476},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1551420085477},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1551420085477},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1551420085477},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1551420085477},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1551420085477},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1551420085477},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1551420085478},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1551420085478},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1551420085478},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1551420085478},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1551420085478},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551420085482},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551420085483},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551420085491},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551420085491},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551420085508},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551420085506},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551420085512},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551420085491},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551420085492},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551420085500},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1551420085492},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1551420085500},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1551420085500},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551420085500},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551420085500},{"_id":"themes/next/source/images/back1.jpg","hash":"c08cdb7e0b518afea835f4032b9b858771e266fe","modified":1551938617752},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1551420085501},{"_id":"themes/next/source/images/back.jpg","hash":"8092041b4570700e26e4439393730120e9ec66dc","modified":1519888768000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1551420085497},{"_id":"source/_posts/buildHexo/hexo1.jpg","hash":"d7410b979199e1583a6e2e65865a55572220cd72","modified":1552134993206},{"_id":"themes/next/.git/objects/pack/pack-17a4bee8f29540da57cd464efc36b18a63c11091.idx","hash":"2651a8f782fa1f6b3f4e746be5325bc53abc9e00","modified":1551420085412},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1551420085524},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551420085511},{"_id":"source/images/about/about2.jpg","hash":"b4d996b000ce9f190d8b86e6b96bec6e597dfed2","modified":1552134993203},{"_id":"themes/next/.git/objects/pack/pack-17a4bee8f29540da57cd464efc36b18a63c11091.pack","hash":"31689539b2c20f31c6504fe7cc989966fb2b4e03","modified":1551420085409}],"Category":[{"name":"vue","_id":"ckh945coh0004773z0c93bwwf"},{"name":"hexo","_id":"ckh945com000a773zi8rahovj"},{"name":"css","_id":"ckh945cor000g773zwxox2zcz"},{"name":"js","_id":"ckh945cou000m773z6o9sfsu0"},{"name":"koa","_id":"ckh945cov000r773z5c0ywmcv"},{"name":"mongoDB","_id":"ckh945cp0000z773zfospoce6"}],"Data":[],"Page":[{"title":"关于我","date":"2019-03-04T09:15:56.000Z","_content":"\n\n\n\n不定期分享技术心得和生活碎片💕\n\n\n\n\n\n\n\n\n\n\n\n\n\n微博：@鲤小鱼爱吃肉\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-03-04 17:15:56\n---\n\n\n\n\n不定期分享技术心得和生活碎片💕\n\n\n\n\n\n\n\n\n\n\n\n\n\n微博：@鲤小鱼爱吃肉\n","updated":"2020-09-04T04:05:44.408Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckh945coe0001773zd3sb4fa0","content":"<p>不定期分享技术心得和生活碎片💕</p>\n<p>微博：@鲤小鱼爱吃肉</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不定期分享技术心得和生活碎片💕</p>\n<p>微博：@鲤小鱼爱吃肉</p>\n"},{"title":"文章分类","date":"2019-03-01T06:10:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-03-01 14:10:47\ntype: \"categories\"  \n---\n","updated":"2019-03-09T12:36:33.198Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckh945cog0003773ztst0pgt2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-03-01T06:13:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-01 14:13:02\ntype: \"tags\"  \n---\n","updated":"2019-03-09T12:36:33.208Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckh945cok0007773z5hy9rt4b","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"后台管理系统element-admin——登录权限篇","date":"2020-09-08T06:47:37.000Z","_content":"\n## Start\n记录写后台管理系统时的一些想法和组件的二次封装，项目初期参考的是[花裤衩](https://github.com/PanJiaChen)大神的[vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)，后期根据业务进行了一些修改。\n\n> [项目Github地址](https://github.com/Yu-Lxy/element-admin)\n\n<!-- more -->\n\n## 登录\n登录流程的思路我们先屡清楚：\n- 用户在登录页输入账号密码，将账号密码发送请求给后端\n  + 将账号密码发送请求给后端的方法写在`vuex`里便于全局token的存取，而前端登录方法里只需要关注登录的结果，并根据结果跳转页面或提示错误，这样代码结构会清晰。\n  ``` js\n  <!-- action: -->\n\n  Login ({commit}, userInfo) {\n    const { username, password } = userInfo\n    return new Promise((resolve, reject) => {\n      login({ username: username.trim(), password: password })\n        .then(res => {\n          if (res.event !== 0) {\n            reject(res)\n          }\n          Vue.ls.set(ACCESS_TOKEN, res.data.token, 12 * 60 * 60 * 1000)\n          commit('SET_TOKEN', res.data.token)\n          resolve()\n        })\n        .catch ((error) => {\n          reject(error)\n        })\n    })\n  }\n  ```\n    ``` js\n   <!-- Login页面: -->\n\n  import { mapActions } from 'vuex'\n\n  methods: {\n    ...mapActions(['Login']),\n    handleLogin () {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true\n          this.Login(this.loginForm)\n            .then(() => {\n              this.$router.push({ path: this.redirect || '/' }).catch(err => {})\n              this.loading = false\n            }).catch((err) => {\n              this.$message.error(err.message);\n              this.loading = false\n            })\n        } else {\n          console.log('error submit!!')\n          return false\n        }\n      })\n    }\n  }\n  ```\n- 后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。\n- 如果登录成功，客户端将`token`存在`localStorage`里，之后要请求其他资源的时候，在请求头里带上这个token。\n  + `service/http.js` 中全局请求拦截器中：`config.headers['token'] = token`。\n- 后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。\n\n\n### 获取用户信息\n登录成功之后，在全局路由钩子`router.beforeEach`中拦截路由，判断如果有token，就去获取用户信息\n``` js\n<!-- router.beforeEach -->\n\nif (Vue.ls.get(ACCESS_TOKEN)) {\n  store.dispatch('GetInfo')\n  .then((infoRes) => {\n    const roles = res.data.role;\n    next()\n  })\n}\n```\n\n## 权限\n权限控制是很常见的需求，我们的业务要求控制到按钮级别。\n> 页面级权限的实现方式是通过获取当前用户的权限去对比路由表，生成当前用户具有权限可访问的路由表，通过 `router.addRouters` 挂载到 `router` 上。\n\n**具体步骤如下：**\n1. 判断是否有`token`，如果没有就去登录，有就第二步。\n2. 获取用户信息 `store.dispatch('GetInfo')`。\n3. 获取信息成功之后，调用`store.dispatch('GenerateRoutes')`，这个方法里会调用/router/index.js里的 `generatorDynamicRouter` 方法，并返回一个根据用户信息构建好权限的路由结构。（generatorDynamicRouter方法里将后台返回的一个平级的menu信息，通过递归的方式生成层级结构，再递归生成层级路由）\n4. 将构建的路由结构信息利用 `Vue-Router` 提供的动态增加路由方法 `router.addRoutes` 加入到路由表中。\n5. 加入路由表后将页面跳转到用户原始要访问的页面,如果没有 `redirect` 则进入默认页面。\n\n> 我们把 `登录` 和 `获取用户信息` 分成了两个接口，原因是当用户刷新页面时，可以根据登录时获取到的token去获取用户信息，避免了刷新还要调用登录接口。\n\n整体流程可以看这个图：\n![promission](element-admin/permission.png)\n\n### 前端控制权限\n旧版本后台的路由表是后端同学根据权限生成的，这使得前端小伙伴每开发一个页面就需要让后端同学配一下路由和权限，光听着就开始皱眉了🤦‍♀️。\n\n于是我们采用了在前端页面配置路由和权限，之后将这份路由表存到后端。\n\n权限/菜单：\n![](element-admin/permission1.png)\n\n权限/角色：\n![](element-admin/permission2.png)\n\n> **一角色对应多权限，一用户对应多角色**\n\n> 当用户登录后得到 `roles`，前端根据 roles 去向后端请求可访问的路由表，从而动态生成可访问页面，之后就是 `router.addRoutes` 动态挂载到 `router` 上，和原来是相同的。\n\n### 按钮级权限\n在配置菜单权限页面也可以添加配置按钮的权限，登录之后的 `store.dispatch('GetInfo')` 中能拿到对应权限的按钮，并存储在 `vuex` 中。\n\n判断按钮是否展示是写了一个公用方法 `checkPermission` ，没有用指令是因为无法适用于所有组件。\n\n将提前设置好的 `唯一键` 传入方法，就可以从vuex里 `store.getters.buttons` 拿到所有按钮权限，对比后返回 `true 或 false`，来控制按钮的展示。\n\n``` js\n<!-- 引入方法 -->\nimport { checkPermission } from '@/utils/permissions'\n\n<!-- data中定义变量 -->\naddEnable: checkPermission('system:role:add')\n\n<!-- v-if判断 -->\n<el-button v-if=\"addEnable\">添加角色</el-button>\n```\n","source":"_posts/element-admin.md","raw":"---\ntitle: 后台管理系统element-admin——登录权限篇\ndate: 2020-09-08 14:47:37\ntags: vue\ncategories: vue\n---\n\n## Start\n记录写后台管理系统时的一些想法和组件的二次封装，项目初期参考的是[花裤衩](https://github.com/PanJiaChen)大神的[vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)，后期根据业务进行了一些修改。\n\n> [项目Github地址](https://github.com/Yu-Lxy/element-admin)\n\n<!-- more -->\n\n## 登录\n登录流程的思路我们先屡清楚：\n- 用户在登录页输入账号密码，将账号密码发送请求给后端\n  + 将账号密码发送请求给后端的方法写在`vuex`里便于全局token的存取，而前端登录方法里只需要关注登录的结果，并根据结果跳转页面或提示错误，这样代码结构会清晰。\n  ``` js\n  <!-- action: -->\n\n  Login ({commit}, userInfo) {\n    const { username, password } = userInfo\n    return new Promise((resolve, reject) => {\n      login({ username: username.trim(), password: password })\n        .then(res => {\n          if (res.event !== 0) {\n            reject(res)\n          }\n          Vue.ls.set(ACCESS_TOKEN, res.data.token, 12 * 60 * 60 * 1000)\n          commit('SET_TOKEN', res.data.token)\n          resolve()\n        })\n        .catch ((error) => {\n          reject(error)\n        })\n    })\n  }\n  ```\n    ``` js\n   <!-- Login页面: -->\n\n  import { mapActions } from 'vuex'\n\n  methods: {\n    ...mapActions(['Login']),\n    handleLogin () {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true\n          this.Login(this.loginForm)\n            .then(() => {\n              this.$router.push({ path: this.redirect || '/' }).catch(err => {})\n              this.loading = false\n            }).catch((err) => {\n              this.$message.error(err.message);\n              this.loading = false\n            })\n        } else {\n          console.log('error submit!!')\n          return false\n        }\n      })\n    }\n  }\n  ```\n- 后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。\n- 如果登录成功，客户端将`token`存在`localStorage`里，之后要请求其他资源的时候，在请求头里带上这个token。\n  + `service/http.js` 中全局请求拦截器中：`config.headers['token'] = token`。\n- 后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。\n\n\n### 获取用户信息\n登录成功之后，在全局路由钩子`router.beforeEach`中拦截路由，判断如果有token，就去获取用户信息\n``` js\n<!-- router.beforeEach -->\n\nif (Vue.ls.get(ACCESS_TOKEN)) {\n  store.dispatch('GetInfo')\n  .then((infoRes) => {\n    const roles = res.data.role;\n    next()\n  })\n}\n```\n\n## 权限\n权限控制是很常见的需求，我们的业务要求控制到按钮级别。\n> 页面级权限的实现方式是通过获取当前用户的权限去对比路由表，生成当前用户具有权限可访问的路由表，通过 `router.addRouters` 挂载到 `router` 上。\n\n**具体步骤如下：**\n1. 判断是否有`token`，如果没有就去登录，有就第二步。\n2. 获取用户信息 `store.dispatch('GetInfo')`。\n3. 获取信息成功之后，调用`store.dispatch('GenerateRoutes')`，这个方法里会调用/router/index.js里的 `generatorDynamicRouter` 方法，并返回一个根据用户信息构建好权限的路由结构。（generatorDynamicRouter方法里将后台返回的一个平级的menu信息，通过递归的方式生成层级结构，再递归生成层级路由）\n4. 将构建的路由结构信息利用 `Vue-Router` 提供的动态增加路由方法 `router.addRoutes` 加入到路由表中。\n5. 加入路由表后将页面跳转到用户原始要访问的页面,如果没有 `redirect` 则进入默认页面。\n\n> 我们把 `登录` 和 `获取用户信息` 分成了两个接口，原因是当用户刷新页面时，可以根据登录时获取到的token去获取用户信息，避免了刷新还要调用登录接口。\n\n整体流程可以看这个图：\n![promission](element-admin/permission.png)\n\n### 前端控制权限\n旧版本后台的路由表是后端同学根据权限生成的，这使得前端小伙伴每开发一个页面就需要让后端同学配一下路由和权限，光听着就开始皱眉了🤦‍♀️。\n\n于是我们采用了在前端页面配置路由和权限，之后将这份路由表存到后端。\n\n权限/菜单：\n![](element-admin/permission1.png)\n\n权限/角色：\n![](element-admin/permission2.png)\n\n> **一角色对应多权限，一用户对应多角色**\n\n> 当用户登录后得到 `roles`，前端根据 roles 去向后端请求可访问的路由表，从而动态生成可访问页面，之后就是 `router.addRoutes` 动态挂载到 `router` 上，和原来是相同的。\n\n### 按钮级权限\n在配置菜单权限页面也可以添加配置按钮的权限，登录之后的 `store.dispatch('GetInfo')` 中能拿到对应权限的按钮，并存储在 `vuex` 中。\n\n判断按钮是否展示是写了一个公用方法 `checkPermission` ，没有用指令是因为无法适用于所有组件。\n\n将提前设置好的 `唯一键` 传入方法，就可以从vuex里 `store.getters.buttons` 拿到所有按钮权限，对比后返回 `true 或 false`，来控制按钮的展示。\n\n``` js\n<!-- 引入方法 -->\nimport { checkPermission } from '@/utils/permissions'\n\n<!-- data中定义变量 -->\naddEnable: checkPermission('system:role:add')\n\n<!-- v-if判断 -->\n<el-button v-if=\"addEnable\">添加角色</el-button>\n```\n","slug":"element-admin","published":1,"updated":"2020-09-09T06:27:37.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945co70000773zaab47rh7","content":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>记录写后台管理系统时的一些想法和组件的二次封装，项目初期参考的是<a href=\"https://github.com/PanJiaChen\" target=\"_blank\" rel=\"noopener\">花裤衩</a>大神的<a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" rel=\"noopener\">vue-element-admin</a>，后期根据业务进行了一些修改。</p>\n<blockquote>\n<p><a href=\"https://github.com/Yu-Lxy/element-admin\" target=\"_blank\" rel=\"noopener\">项目Github地址</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>登录流程的思路我们先屡清楚：</p>\n<ul>\n<li><p>用户在登录页输入账号密码，将账号密码发送请求给后端</p>\n<ul>\n<li><p>将账号密码发送请求给后端的方法写在<code>vuex</code>里便于全局token的存取，而前端登录方法里只需要关注登录的结果，并根据结果跳转页面或提示错误，这样代码结构会清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- action: --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Login (&#123;commit&#125;, userInfo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; username, password &#125; = userInfo</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    login(&#123; <span class=\"attr\">username</span>: username.trim(), <span class=\"attr\">password</span>: password &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.event !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          reject(res)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Vue.ls.set(ACCESS_TOKEN, res.data.token, <span class=\"number\">12</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">        commit(<span class=\"string\">'SET_TOKEN'</span>, res.data.token)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- Login页面: --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">'Login'</span>]),</span><br><span class=\"line\">  handleLogin () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$refs.loginForm.validate(<span class=\"function\"><span class=\"params\">valid</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Login(<span class=\"keyword\">this</span>.loginForm)</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">path</span>: <span class=\"keyword\">this</span>.redirect || <span class=\"string\">'/'</span> &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$message.error(err.message);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error submit!!'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。</p>\n</li>\n<li>如果登录成功，客户端将<code>token</code>存在<code>localStorage</code>里，之后要请求其他资源的时候，在请求头里带上这个token。<ul>\n<li><code>service/http.js</code> 中全局请求拦截器中：<code>config.headers[&#39;token&#39;] = token</code>。</li>\n</ul>\n</li>\n<li>后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。</li>\n</ul>\n<h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><p>登录成功之后，在全局路由钩子<code>router.beforeEach</code>中拦截路由，判断如果有token，就去获取用户信息<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- router.beforeEach --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Vue.ls.get(ACCESS_TOKEN)) &#123;</span><br><span class=\"line\">  store.dispatch(<span class=\"string\">'GetInfo'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">infoRes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> roles = res.data.role;</span><br><span class=\"line\">    next()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>权限控制是很常见的需求，我们的业务要求控制到按钮级别。</p>\n<blockquote>\n<p>页面级权限的实现方式是通过获取当前用户的权限去对比路由表，生成当前用户具有权限可访问的路由表，通过 <code>router.addRouters</code> 挂载到 <code>router</code> 上。</p>\n</blockquote>\n<p><strong>具体步骤如下：</strong></p>\n<ol>\n<li>判断是否有<code>token</code>，如果没有就去登录，有就第二步。</li>\n<li>获取用户信息 <code>store.dispatch(&#39;GetInfo&#39;)</code>。</li>\n<li>获取信息成功之后，调用<code>store.dispatch(&#39;GenerateRoutes&#39;)</code>，这个方法里会调用/router/index.js里的 <code>generatorDynamicRouter</code> 方法，并返回一个根据用户信息构建好权限的路由结构。（generatorDynamicRouter方法里将后台返回的一个平级的menu信息，通过递归的方式生成层级结构，再递归生成层级路由）</li>\n<li>将构建的路由结构信息利用 <code>Vue-Router</code> 提供的动态增加路由方法 <code>router.addRoutes</code> 加入到路由表中。</li>\n<li>加入路由表后将页面跳转到用户原始要访问的页面,如果没有 <code>redirect</code> 则进入默认页面。</li>\n</ol>\n<blockquote>\n<p>我们把 <code>登录</code> 和 <code>获取用户信息</code> 分成了两个接口，原因是当用户刷新页面时，可以根据登录时获取到的token去获取用户信息，避免了刷新还要调用登录接口。</p>\n</blockquote>\n<p>整体流程可以看这个图：<br><img src=\"/2020/09/08/element-admin/permission.png\" alt=\"promission\"></p>\n<h3 id=\"前端控制权限\"><a href=\"#前端控制权限\" class=\"headerlink\" title=\"前端控制权限\"></a>前端控制权限</h3><p>旧版本后台的路由表是后端同学根据权限生成的，这使得前端小伙伴每开发一个页面就需要让后端同学配一下路由和权限，光听着就开始皱眉了🤦‍♀️。</p>\n<p>于是我们采用了在前端页面配置路由和权限，之后将这份路由表存到后端。</p>\n<p>权限/菜单：<br><img src=\"/2020/09/08/element-admin/permission1.png\" alt></p>\n<p>权限/角色：<br><img src=\"/2020/09/08/element-admin/permission2.png\" alt></p>\n<blockquote>\n<p><strong>一角色对应多权限，一用户对应多角色</strong></p>\n</blockquote>\n<blockquote>\n<p>当用户登录后得到 <code>roles</code>，前端根据 roles 去向后端请求可访问的路由表，从而动态生成可访问页面，之后就是 <code>router.addRoutes</code> 动态挂载到 <code>router</code> 上，和原来是相同的。</p>\n</blockquote>\n<h3 id=\"按钮级权限\"><a href=\"#按钮级权限\" class=\"headerlink\" title=\"按钮级权限\"></a>按钮级权限</h3><p>在配置菜单权限页面也可以添加配置按钮的权限，登录之后的 <code>store.dispatch(&#39;GetInfo&#39;)</code> 中能拿到对应权限的按钮，并存储在 <code>vuex</code> 中。</p>\n<p>判断按钮是否展示是写了一个公用方法 <code>checkPermission</code> ，没有用指令是因为无法适用于所有组件。</p>\n<p>将提前设置好的 <code>唯一键</code> 传入方法，就可以从vuex里 <code>store.getters.buttons</code> 拿到所有按钮权限，对比后返回 <code>true 或 false</code>，来控制按钮的展示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入方法 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; checkPermission &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/permissions'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- data中定义变量 --&gt;</span><br><span class=\"line\">addEnable: checkPermission(<span class=\"string\">'system:role:add'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- v-<span class=\"keyword\">if</span>判断 --&gt;</span><br><span class=\"line\">&lt;el-button v-<span class=\"keyword\">if</span>=<span class=\"string\">\"addEnable\"</span>&gt;添加角色&lt;<span class=\"regexp\">/el-button&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>记录写后台管理系统时的一些想法和组件的二次封装，项目初期参考的是<a href=\"https://github.com/PanJiaChen\" target=\"_blank\" rel=\"noopener\">花裤衩</a>大神的<a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" rel=\"noopener\">vue-element-admin</a>，后期根据业务进行了一些修改。</p>\n<blockquote>\n<p><a href=\"https://github.com/Yu-Lxy/element-admin\" target=\"_blank\" rel=\"noopener\">项目Github地址</a></p>\n</blockquote>","more":"<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>登录流程的思路我们先屡清楚：</p>\n<ul>\n<li><p>用户在登录页输入账号密码，将账号密码发送请求给后端</p>\n<ul>\n<li><p>将账号密码发送请求给后端的方法写在<code>vuex</code>里便于全局token的存取，而前端登录方法里只需要关注登录的结果，并根据结果跳转页面或提示错误，这样代码结构会清晰。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- action: --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Login (&#123;commit&#125;, userInfo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; username, password &#125; = userInfo</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    login(&#123; <span class=\"attr\">username</span>: username.trim(), <span class=\"attr\">password</span>: password &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.event !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          reject(res)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Vue.ls.set(ACCESS_TOKEN, res.data.token, <span class=\"number\">12</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">        commit(<span class=\"string\">'SET_TOKEN'</span>, res.data.token)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch (<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- Login页面: --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">'Login'</span>]),</span><br><span class=\"line\">  handleLogin () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$refs.loginForm.validate(<span class=\"function\"><span class=\"params\">valid</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Login(<span class=\"keyword\">this</span>.loginForm)</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.push(&#123; <span class=\"attr\">path</span>: <span class=\"keyword\">this</span>.redirect || <span class=\"string\">'/'</span> &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$message.error(err.message);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error submit!!'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。</p>\n</li>\n<li>如果登录成功，客户端将<code>token</code>存在<code>localStorage</code>里，之后要请求其他资源的时候，在请求头里带上这个token。<ul>\n<li><code>service/http.js</code> 中全局请求拦截器中：<code>config.headers[&#39;token&#39;] = token</code>。</li>\n</ul>\n</li>\n<li>后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。</li>\n</ul>\n<h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><p>登录成功之后，在全局路由钩子<code>router.beforeEach</code>中拦截路由，判断如果有token，就去获取用户信息<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- router.beforeEach --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Vue.ls.get(ACCESS_TOKEN)) &#123;</span><br><span class=\"line\">  store.dispatch(<span class=\"string\">'GetInfo'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">infoRes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> roles = res.data.role;</span><br><span class=\"line\">    next()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>权限控制是很常见的需求，我们的业务要求控制到按钮级别。</p>\n<blockquote>\n<p>页面级权限的实现方式是通过获取当前用户的权限去对比路由表，生成当前用户具有权限可访问的路由表，通过 <code>router.addRouters</code> 挂载到 <code>router</code> 上。</p>\n</blockquote>\n<p><strong>具体步骤如下：</strong></p>\n<ol>\n<li>判断是否有<code>token</code>，如果没有就去登录，有就第二步。</li>\n<li>获取用户信息 <code>store.dispatch(&#39;GetInfo&#39;)</code>。</li>\n<li>获取信息成功之后，调用<code>store.dispatch(&#39;GenerateRoutes&#39;)</code>，这个方法里会调用/router/index.js里的 <code>generatorDynamicRouter</code> 方法，并返回一个根据用户信息构建好权限的路由结构。（generatorDynamicRouter方法里将后台返回的一个平级的menu信息，通过递归的方式生成层级结构，再递归生成层级路由）</li>\n<li>将构建的路由结构信息利用 <code>Vue-Router</code> 提供的动态增加路由方法 <code>router.addRoutes</code> 加入到路由表中。</li>\n<li>加入路由表后将页面跳转到用户原始要访问的页面,如果没有 <code>redirect</code> 则进入默认页面。</li>\n</ol>\n<blockquote>\n<p>我们把 <code>登录</code> 和 <code>获取用户信息</code> 分成了两个接口，原因是当用户刷新页面时，可以根据登录时获取到的token去获取用户信息，避免了刷新还要调用登录接口。</p>\n</blockquote>\n<p>整体流程可以看这个图：<br><img src=\"/2020/09/08/element-admin/permission.png\" alt=\"promission\"></p>\n<h3 id=\"前端控制权限\"><a href=\"#前端控制权限\" class=\"headerlink\" title=\"前端控制权限\"></a>前端控制权限</h3><p>旧版本后台的路由表是后端同学根据权限生成的，这使得前端小伙伴每开发一个页面就需要让后端同学配一下路由和权限，光听着就开始皱眉了🤦‍♀️。</p>\n<p>于是我们采用了在前端页面配置路由和权限，之后将这份路由表存到后端。</p>\n<p>权限/菜单：<br><img src=\"/2020/09/08/element-admin/permission1.png\" alt></p>\n<p>权限/角色：<br><img src=\"/2020/09/08/element-admin/permission2.png\" alt></p>\n<blockquote>\n<p><strong>一角色对应多权限，一用户对应多角色</strong></p>\n</blockquote>\n<blockquote>\n<p>当用户登录后得到 <code>roles</code>，前端根据 roles 去向后端请求可访问的路由表，从而动态生成可访问页面，之后就是 <code>router.addRoutes</code> 动态挂载到 <code>router</code> 上，和原来是相同的。</p>\n</blockquote>\n<h3 id=\"按钮级权限\"><a href=\"#按钮级权限\" class=\"headerlink\" title=\"按钮级权限\"></a>按钮级权限</h3><p>在配置菜单权限页面也可以添加配置按钮的权限，登录之后的 <code>store.dispatch(&#39;GetInfo&#39;)</code> 中能拿到对应权限的按钮，并存储在 <code>vuex</code> 中。</p>\n<p>判断按钮是否展示是写了一个公用方法 <code>checkPermission</code> ，没有用指令是因为无法适用于所有组件。</p>\n<p>将提前设置好的 <code>唯一键</code> 传入方法，就可以从vuex里 <code>store.getters.buttons</code> 拿到所有按钮权限，对比后返回 <code>true 或 false</code>，来控制按钮的展示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入方法 --&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; checkPermission &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/permissions'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- data中定义变量 --&gt;</span><br><span class=\"line\">addEnable: checkPermission(<span class=\"string\">'system:role:add'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- v-<span class=\"keyword\">if</span>判断 --&gt;</span><br><span class=\"line\">&lt;el-button v-<span class=\"keyword\">if</span>=<span class=\"string\">\"addEnable\"</span>&gt;添加角色&lt;<span class=\"regexp\">/el-button&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"hexo搭建个人博客","date":"2019-03-01T09:32:15.000Z","_content":"\n第一次看到这种类型的博客就赶脚逼格很高的样纸 😎\n\n后来试着搭起来觉得并不困难 ☁️\n\n简单来说hexo就是一个静态页面生成和创建的工具\n\n这篇教你搭建一个自己的hexo博客 👉\n\n<!-- more -->\n\n### 我的搭建步骤有以下：\n* 安装Git\n* 安装Node.js\n* 安装Hexo\n* GitHub创建个人仓库\n* 生成SSH添加到GitHub\n* 将hexo部署到GitHub\n\n\n### 1.安装git和node\ngit和node是必备条件, 可以戳：\n[廖雪峰大神的git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n[下载node](http://nodejs.cn/download/)\n\n\n### 2.安装hexo\ngit和node安好之后，接下来就是安hexo了\n1.可以先新建一个文件夹，例🌰\b:我的是myBlog\n进到这个文件夹内，打开命令行\n2.Windows的小伙伴\b可以直接用 `npm install -g hexo`\nmac的小伙伴需要用 `sudo npm install --unsafe-perm --verbose -g hexo`\n完成之后可以 `hexo -v` 查看hexo版本\n3.接下来初始化hexo `hexo init`\n完成之后会在myBlog生成以下文件：\n\n| 名称           | 说明                                                  |\n| -------------- | ----------------------------------------------------- |\n| node_modules： | 是依赖包                                              |\n| public：       | 生成的静态文件，这个目录最终会发布到服务器            |\n| scaffolds：    | 命令生成文章等的模板                                  |\n| source：       | 编写的markdown文件，_drafts草稿文件，_posts发布的文章 |\n| themes：       | 主题                                                  |\n| _config.yml：  | 整个博客的配置                                        |\n| package.json： | 项目所需模块项目的配置信息                            |\n\n我们正常使用，修改最多的源码是 `_config.yml` 文件，不管是博客的基础配置，还是模板，都是修改这个文件。\n`source` 是我们日常写文章要用的目录，是我们日常操作的文件夹。\n如果要修改主题模板，就需要操作 `themes`.\n\n4.接下来\n`hexo g`\n`hexo s`\n就可以在本地 `http://localhost:4000` 预览了\n`ctrl+c` 或是 `control+c` 关闭本地服务\n\n### GitHub创建个人仓库\n没有github账号需要先注册一个哦\n有账号就新建一个库：\n![Create a new repository](buildHexo/hexo1.jpg)\n建一个和你的username一样名字的库，比如我的就是这样：\n![](buildHexo/hexo2.jpg)\n点击create repository\n\n### 生成SSH添加到GitHub(mac)\n1.检查是否已经存在SSH Key\n打开电脑终端，输入 `ls -al ~/.ssh`\n2.如果终端出现文件id_rsa.pub 或 id_dsa.pub，则表示该电脑已经存在SSH Key，此时可继续输入\n`cat ~/.ssh/id_rsa.pub`\n复制接下来显示出来的一大串内容\n3.如果终端未出现id_rsa.pub 或 id_dsa.pub文件，表示该电脑还没有配置SSH Key，此时需要输\n`ssh-keygen -t rsa -C \"your_full_name@xxxxx.com\"`\n连续回车即可，也可能会让你输入密码，密码就是你的开机密码\n创建完成后\b按照第二步操作复制就行啦\n这时候去到GitHub的setting![](buildHexo/hexo3.jpg)\n再点击SSH and GPG keys![](buildHexo/hexo4.jpg)\n点击New SSH key之后吧你刚刚复制的一串key粘在这里面 点击Add SSH key就ok啦\n![](buildHexo/hexo5.jpg)\n\n### 将hexo部署到GitHub\n完成这一步就可以把你的hexo部署到github上辣\n1.首先在你的项目文件下找到 `_config.yml` 进去找到\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n把这个地址改成你专属的，比如我的是：\n```\nrepo: https://github.com/Yu-Lxy/Yu-Lxy.github.io\n```\n*注：这里有个坑\b🕳，一定要在冒号后面加一个空格，不然 `hexo d` 的时候会没有反应\n\n2.需要安装deploy-git,也就是部署的命令,这样你才能用命令部署到GitHub:\n`npm install hexo-deployer-git --save`\n3.然后\n`hexo g`\n`hexo d`\n输入 `http://yourname.github.io` 就能看到你的hexo咯~\b😆\n\n\b\n","source":"_posts/buildHexo.md","raw":"---\ntitle: hexo搭建个人博客\ndate: 2019-03-01 17:32:15\ntags: hexo\ncategories: hexo\n---\n\n第一次看到这种类型的博客就赶脚逼格很高的样纸 😎\n\n后来试着搭起来觉得并不困难 ☁️\n\n简单来说hexo就是一个静态页面生成和创建的工具\n\n这篇教你搭建一个自己的hexo博客 👉\n\n<!-- more -->\n\n### 我的搭建步骤有以下：\n* 安装Git\n* 安装Node.js\n* 安装Hexo\n* GitHub创建个人仓库\n* 生成SSH添加到GitHub\n* 将hexo部署到GitHub\n\n\n### 1.安装git和node\ngit和node是必备条件, 可以戳：\n[廖雪峰大神的git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n[下载node](http://nodejs.cn/download/)\n\n\n### 2.安装hexo\ngit和node安好之后，接下来就是安hexo了\n1.可以先新建一个文件夹，例🌰\b:我的是myBlog\n进到这个文件夹内，打开命令行\n2.Windows的小伙伴\b可以直接用 `npm install -g hexo`\nmac的小伙伴需要用 `sudo npm install --unsafe-perm --verbose -g hexo`\n完成之后可以 `hexo -v` 查看hexo版本\n3.接下来初始化hexo `hexo init`\n完成之后会在myBlog生成以下文件：\n\n| 名称           | 说明                                                  |\n| -------------- | ----------------------------------------------------- |\n| node_modules： | 是依赖包                                              |\n| public：       | 生成的静态文件，这个目录最终会发布到服务器            |\n| scaffolds：    | 命令生成文章等的模板                                  |\n| source：       | 编写的markdown文件，_drafts草稿文件，_posts发布的文章 |\n| themes：       | 主题                                                  |\n| _config.yml：  | 整个博客的配置                                        |\n| package.json： | 项目所需模块项目的配置信息                            |\n\n我们正常使用，修改最多的源码是 `_config.yml` 文件，不管是博客的基础配置，还是模板，都是修改这个文件。\n`source` 是我们日常写文章要用的目录，是我们日常操作的文件夹。\n如果要修改主题模板，就需要操作 `themes`.\n\n4.接下来\n`hexo g`\n`hexo s`\n就可以在本地 `http://localhost:4000` 预览了\n`ctrl+c` 或是 `control+c` 关闭本地服务\n\n### GitHub创建个人仓库\n没有github账号需要先注册一个哦\n有账号就新建一个库：\n![Create a new repository](buildHexo/hexo1.jpg)\n建一个和你的username一样名字的库，比如我的就是这样：\n![](buildHexo/hexo2.jpg)\n点击create repository\n\n### 生成SSH添加到GitHub(mac)\n1.检查是否已经存在SSH Key\n打开电脑终端，输入 `ls -al ~/.ssh`\n2.如果终端出现文件id_rsa.pub 或 id_dsa.pub，则表示该电脑已经存在SSH Key，此时可继续输入\n`cat ~/.ssh/id_rsa.pub`\n复制接下来显示出来的一大串内容\n3.如果终端未出现id_rsa.pub 或 id_dsa.pub文件，表示该电脑还没有配置SSH Key，此时需要输\n`ssh-keygen -t rsa -C \"your_full_name@xxxxx.com\"`\n连续回车即可，也可能会让你输入密码，密码就是你的开机密码\n创建完成后\b按照第二步操作复制就行啦\n这时候去到GitHub的setting![](buildHexo/hexo3.jpg)\n再点击SSH and GPG keys![](buildHexo/hexo4.jpg)\n点击New SSH key之后吧你刚刚复制的一串key粘在这里面 点击Add SSH key就ok啦\n![](buildHexo/hexo5.jpg)\n\n### 将hexo部署到GitHub\n完成这一步就可以把你的hexo部署到github上辣\n1.首先在你的项目文件下找到 `_config.yml` 进去找到\n```\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n把这个地址改成你专属的，比如我的是：\n```\nrepo: https://github.com/Yu-Lxy/Yu-Lxy.github.io\n```\n*注：这里有个坑\b🕳，一定要在冒号后面加一个空格，不然 `hexo d` 的时候会没有反应\n\n2.需要安装deploy-git,也就是部署的命令,这样你才能用命令部署到GitHub:\n`npm install hexo-deployer-git --save`\n3.然后\n`hexo g`\n`hexo d`\n输入 `http://yourname.github.io` 就能看到你的hexo咯~\b😆\n\n\b\n","slug":"buildHexo","published":1,"updated":"2020-09-04T02:35:57.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945cof0002773zdwz58405","content":"<p>第一次看到这种类型的博客就赶脚逼格很高的样纸 😎</p>\n<p>后来试着搭起来觉得并不困难 ☁️</p>\n<p>简单来说hexo就是一个静态页面生成和创建的工具</p>\n<p>这篇教你搭建一个自己的hexo博客 👉</p>\n<a id=\"more\"></a>\n<h3 id=\"我的搭建步骤有以下：\"><a href=\"#我的搭建步骤有以下：\" class=\"headerlink\" title=\"我的搭建步骤有以下：\"></a>我的搭建步骤有以下：</h3><ul>\n<li>安装Git</li>\n<li>安装Node.js</li>\n<li>安装Hexo</li>\n<li>GitHub创建个人仓库</li>\n<li>生成SSH添加到GitHub</li>\n<li>将hexo部署到GitHub</li>\n</ul>\n<h3 id=\"1-安装git和node\"><a href=\"#1-安装git和node\" class=\"headerlink\" title=\"1.安装git和node\"></a>1.安装git和node</h3><p>git和node是必备条件, 可以戳：<br><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰大神的git教程</a><br><a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">下载node</a></p>\n<h3 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2.安装hexo\"></a>2.安装hexo</h3><p>git和node安好之后，接下来就是安hexo了<br>1.可以先新建一个文件夹，例🌰\b:我的是myBlog<br>进到这个文件夹内，打开命令行<br>2.Windows的小伙伴\b可以直接用 <code>npm install -g hexo</code><br>mac的小伙伴需要用 <code>sudo npm install --unsafe-perm --verbose -g hexo</code><br>完成之后可以 <code>hexo -v</code> 查看hexo版本<br>3.接下来初始化hexo <code>hexo init</code><br>完成之后会在myBlog生成以下文件：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node_modules：</td>\n<td>是依赖包</td>\n</tr>\n<tr>\n<td>public：</td>\n<td>生成的静态文件，这个目录最终会发布到服务器</td>\n</tr>\n<tr>\n<td>scaffolds：</td>\n<td>命令生成文章等的模板</td>\n</tr>\n<tr>\n<td>source：</td>\n<td>编写的markdown文件，_drafts草稿文件，_posts发布的文章</td>\n</tr>\n<tr>\n<td>themes：</td>\n<td>主题</td>\n</tr>\n<tr>\n<td>_config.yml：</td>\n<td>整个博客的配置</td>\n</tr>\n<tr>\n<td>package.json：</td>\n<td>项目所需模块项目的配置信息</td>\n</tr>\n</tbody>\n</table>\n<p>我们正常使用，修改最多的源码是 <code>_config.yml</code> 文件，不管是博客的基础配置，还是模板，都是修改这个文件。<br><code>source</code> 是我们日常写文章要用的目录，是我们日常操作的文件夹。<br>如果要修改主题模板，就需要操作 <code>themes</code>.</p>\n<p>4.接下来<br><code>hexo g</code><br><code>hexo s</code><br>就可以在本地 <code>http://localhost:4000</code> 预览了<br><code>ctrl+c</code> 或是 <code>control+c</code> 关闭本地服务</p>\n<h3 id=\"GitHub创建个人仓库\"><a href=\"#GitHub创建个人仓库\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h3><p>没有github账号需要先注册一个哦<br>有账号就新建一个库：<br><img src=\"/2019/03/01/buildHexo/hexo1.jpg\" alt=\"Create a new repository\"><br>建一个和你的username一样名字的库，比如我的就是这样：<br><img src=\"/2019/03/01/buildHexo/hexo2.jpg\" alt><br>点击create repository</p>\n<h3 id=\"生成SSH添加到GitHub-mac\"><a href=\"#生成SSH添加到GitHub-mac\" class=\"headerlink\" title=\"生成SSH添加到GitHub(mac)\"></a>生成SSH添加到GitHub(mac)</h3><p>1.检查是否已经存在SSH Key<br>打开电脑终端，输入 <code>ls -al ~/.ssh</code><br>2.如果终端出现文件id_rsa.pub 或 id_dsa.pub，则表示该电脑已经存在SSH Key，此时可继续输入<br><code>cat ~/.ssh/id_rsa.pub</code><br>复制接下来显示出来的一大串内容<br>3.如果终端未出现id_rsa.pub 或 id_dsa.pub文件，表示该电脑还没有配置SSH Key，此时需要输<br><code>ssh-keygen -t rsa -C &quot;your_full_name@xxxxx.com&quot;</code><br>连续回车即可，也可能会让你输入密码，密码就是你的开机密码<br>创建完成后\b按照第二步操作复制就行啦<br>这时候去到GitHub的setting<img src=\"/2019/03/01/buildHexo/hexo3.jpg\" alt><br>再点击SSH and GPG keys<img src=\"/2019/03/01/buildHexo/hexo4.jpg\" alt><br>点击New SSH key之后吧你刚刚复制的一串key粘在这里面 点击Add SSH key就ok啦<br><img src=\"/2019/03/01/buildHexo/hexo5.jpg\" alt></p>\n<h3 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h3><p>完成这一步就可以把你的hexo部署到github上辣<br>1.首先在你的项目文件下找到 <code>_config.yml</code> 进去找到<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class=\"line\">  <span class=\"attribute\">branch</span>: master</span><br></pre></td></tr></table></figure></p>\n<p>把这个地址改成你专属的，比如我的是：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">repo:</span> <span class=\"string\">https:</span><span class=\"comment\">//github.com/Yu-Lxy/Yu-Lxy.github.io</span></span><br></pre></td></tr></table></figure></p>\n<p>*注：这里有个坑\b🕳，一定要在冒号后面加一个空格，不然 <code>hexo d</code> 的时候会没有反应</p>\n<p>2.需要安装deploy-git,也就是部署的命令,这样你才能用命令部署到GitHub:<br><code>npm install hexo-deployer-git --save</code><br>3.然后<br><code>hexo g</code><br><code>hexo d</code><br>输入 <code>http://yourname.github.io</code> 就能看到你的hexo咯~\b😆</p>\n<p>\b</p>\n","site":{"data":{}},"excerpt":"<p>第一次看到这种类型的博客就赶脚逼格很高的样纸 😎</p>\n<p>后来试着搭起来觉得并不困难 ☁️</p>\n<p>简单来说hexo就是一个静态页面生成和创建的工具</p>\n<p>这篇教你搭建一个自己的hexo博客 👉</p>","more":"<h3 id=\"我的搭建步骤有以下：\"><a href=\"#我的搭建步骤有以下：\" class=\"headerlink\" title=\"我的搭建步骤有以下：\"></a>我的搭建步骤有以下：</h3><ul>\n<li>安装Git</li>\n<li>安装Node.js</li>\n<li>安装Hexo</li>\n<li>GitHub创建个人仓库</li>\n<li>生成SSH添加到GitHub</li>\n<li>将hexo部署到GitHub</li>\n</ul>\n<h3 id=\"1-安装git和node\"><a href=\"#1-安装git和node\" class=\"headerlink\" title=\"1.安装git和node\"></a>1.安装git和node</h3><p>git和node是必备条件, 可以戳：<br><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰大神的git教程</a><br><a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">下载node</a></p>\n<h3 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2.安装hexo\"></a>2.安装hexo</h3><p>git和node安好之后，接下来就是安hexo了<br>1.可以先新建一个文件夹，例🌰\b:我的是myBlog<br>进到这个文件夹内，打开命令行<br>2.Windows的小伙伴\b可以直接用 <code>npm install -g hexo</code><br>mac的小伙伴需要用 <code>sudo npm install --unsafe-perm --verbose -g hexo</code><br>完成之后可以 <code>hexo -v</code> 查看hexo版本<br>3.接下来初始化hexo <code>hexo init</code><br>完成之后会在myBlog生成以下文件：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node_modules：</td>\n<td>是依赖包</td>\n</tr>\n<tr>\n<td>public：</td>\n<td>生成的静态文件，这个目录最终会发布到服务器</td>\n</tr>\n<tr>\n<td>scaffolds：</td>\n<td>命令生成文章等的模板</td>\n</tr>\n<tr>\n<td>source：</td>\n<td>编写的markdown文件，_drafts草稿文件，_posts发布的文章</td>\n</tr>\n<tr>\n<td>themes：</td>\n<td>主题</td>\n</tr>\n<tr>\n<td>_config.yml：</td>\n<td>整个博客的配置</td>\n</tr>\n<tr>\n<td>package.json：</td>\n<td>项目所需模块项目的配置信息</td>\n</tr>\n</tbody>\n</table>\n<p>我们正常使用，修改最多的源码是 <code>_config.yml</code> 文件，不管是博客的基础配置，还是模板，都是修改这个文件。<br><code>source</code> 是我们日常写文章要用的目录，是我们日常操作的文件夹。<br>如果要修改主题模板，就需要操作 <code>themes</code>.</p>\n<p>4.接下来<br><code>hexo g</code><br><code>hexo s</code><br>就可以在本地 <code>http://localhost:4000</code> 预览了<br><code>ctrl+c</code> 或是 <code>control+c</code> 关闭本地服务</p>\n<h3 id=\"GitHub创建个人仓库\"><a href=\"#GitHub创建个人仓库\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a>GitHub创建个人仓库</h3><p>没有github账号需要先注册一个哦<br>有账号就新建一个库：<br><img src=\"/2019/03/01/buildHexo/hexo1.jpg\" alt=\"Create a new repository\"><br>建一个和你的username一样名字的库，比如我的就是这样：<br><img src=\"/2019/03/01/buildHexo/hexo2.jpg\" alt><br>点击create repository</p>\n<h3 id=\"生成SSH添加到GitHub-mac\"><a href=\"#生成SSH添加到GitHub-mac\" class=\"headerlink\" title=\"生成SSH添加到GitHub(mac)\"></a>生成SSH添加到GitHub(mac)</h3><p>1.检查是否已经存在SSH Key<br>打开电脑终端，输入 <code>ls -al ~/.ssh</code><br>2.如果终端出现文件id_rsa.pub 或 id_dsa.pub，则表示该电脑已经存在SSH Key，此时可继续输入<br><code>cat ~/.ssh/id_rsa.pub</code><br>复制接下来显示出来的一大串内容<br>3.如果终端未出现id_rsa.pub 或 id_dsa.pub文件，表示该电脑还没有配置SSH Key，此时需要输<br><code>ssh-keygen -t rsa -C &quot;your_full_name@xxxxx.com&quot;</code><br>连续回车即可，也可能会让你输入密码，密码就是你的开机密码<br>创建完成后\b按照第二步操作复制就行啦<br>这时候去到GitHub的setting<img src=\"/2019/03/01/buildHexo/hexo3.jpg\" alt><br>再点击SSH and GPG keys<img src=\"/2019/03/01/buildHexo/hexo4.jpg\" alt><br>点击New SSH key之后吧你刚刚复制的一串key粘在这里面 点击Add SSH key就ok啦<br><img src=\"/2019/03/01/buildHexo/hexo5.jpg\" alt></p>\n<h3 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h3><p>完成这一步就可以把你的hexo部署到github上辣<br>1.首先在你的项目文件下找到 <code>_config.yml</code> 进去找到<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class=\"line\">  <span class=\"attribute\">branch</span>: master</span><br></pre></td></tr></table></figure></p>\n<p>把这个地址改成你专属的，比如我的是：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">repo:</span> <span class=\"string\">https:</span><span class=\"comment\">//github.com/Yu-Lxy/Yu-Lxy.github.io</span></span><br></pre></td></tr></table></figure></p>\n<p>*注：这里有个坑\b🕳，一定要在冒号后面加一个空格，不然 <code>hexo d</code> 的时候会没有反应</p>\n<p>2.需要安装deploy-git,也就是部署的命令,这样你才能用命令部署到GitHub:<br><code>npm install hexo-deployer-git --save</code><br>3.然后<br><code>hexo g</code><br><code>hexo d</code><br>输入 <code>http://yourname.github.io</code> 就能看到你的hexo咯~\b😆</p>\n<p>\b</p>"},{"title":"Grid网格布局常用属性总结","date":"2020-11-08T12:39:29.000Z","_content":"\nGrid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。\n\nFlex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指定\"项目所在\"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。\n\n以上两段话都是阮一峰大神说的哈~😆\n本篇主要记录一些主要的概念和常用的属性\n\n<!-- more -->\n### 概念\n#### 容器和项目\n> 采用网格布局的区域，称为”容器“（container）。容器内部采用网格定位的子元素，称为”项目“（item）。\n\n#### 行和列\n> 容器里面的水平区域称为”行“（row），垂直区域称为”列“（column）。\n\n#### 单元格\n> 行和列交叉区域，称为”单元格“（cell）。\n\n#### 网格线\n> 划分网格的线，称为”网格线“（grid line）。水平网格线划分出行，垂直网格线划分出列。\n\n### 容器属性\n - `display: grid`  指定一个容器采用网格布局\n - `display: inline-grid` 指定该元素为行内元素，内部采用网格布局\n - `grid-template-columns：10px 20px 30%` 列宽，每个值和每列一一对应，可像素或百分数\n - `grid-template-rows：10px 20px 30%` 行高，每个值和每行一一对应，可像素或百分数\n - `repeat()` 简化重复的值，例：grid-template-rows: repeat(3, 100px);\n - `auto-fill关键字` 自动填充个数，例：grid-template-columns: repeat(auto-fill, 100px);\n - `fr关键字` 比例关系，例：grid-template-columns: 1fr 1fr;\n - `minmax()` 长度范围，例：grid-template-columns: 1fr 1fr minmax(100px, 1fr);\n - `auto关键字` 自定宽度，例：grid-template-columns: 100px auto 100px;\n - `[]可定义网格线名字` 例：grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];\n - `row-gap:10px` 行间距\n - `column-gap: 20px` 列间距\n - `gap: 10px 20px` 行间距和列间距的合并写法\n - `grid-auto-flow: row` 排列顺序，先行后列\n - `grid-auto-flow: row dense` 排列顺序，先行后列，紧密填满\n - `grid-auto-flow: column` 排列顺序，先列后行\n - `grid-auto-flow: column dense` 排列顺序，先列后行，紧密填满\n - `justify-items: start | end | center | stretch;` 设置单元格内容的水平位置（左中右）\n - `align-items: start | end | center | stretch;` 设置单元格内容的垂直位置（上中下）\n - `place-items: <align-items> <justify-items>;` align-items属性和justify-items属性的合并简写形式。例：place-items: start end;\n - `justify-content: start | end | center | stretch | space-around | space-between | space-evenly;` 整个内容区域在容器里面的水平位置（左中右）\n - `align-content: start | end | center | stretch | space-around | space-between | space-evenly;` 整个内容区域的垂直位置（上中下）\n - `place-content: <align-content> <justify-content>` align-content属性和justify-content属性的合并简写形式。\n\n### 项目属性\n - `grid-column-start: 2` 指定项目的左边框所在的垂直网格线\n - `grid-column-end: 3` 指定项目的右边框所在的垂直网格线\n - `grid-row-start: 4` 指定项目的上边框所在的水平网格线\n - `grid-row-end: 5` 指定项目的下边框所在的水平网格线\n - `span关键字` 表示”跨越“，即左右边框（上下边框）之间跨越多少个网格，例：grid-column-start: span 2;\n - `grid-column 属性` 是grid-column-start和grid-column-end的合并简写形式，例：grid-column: 1 / 2;\n - `grid-row 属性` 是grid-row-start属性和grid-row-end的合并简写形式，例：grid-row: 1 / 3;\n - `grid-area 属性` 指定项目放在哪一个区域，例：grid-area: e;\n - `justify-self: start | end | center | stretch` 设置单元格内容的水平位置（左中右）\n - `align-self: start | end | center | stretch` 设置单元格内容的垂直位置（上中下）\n - `place-self: <align-self> <justify-self>` 是align-self属性和justify-self属性的合并简写形式","source":"_posts/grid.md","raw":"---\ntitle: Grid网格布局常用属性总结\ndate: 2020-11-08 20:39:29\ntags: css\ncategories: css\n---\n\nGrid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。\n\nFlex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指定\"项目所在\"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。\n\n以上两段话都是阮一峰大神说的哈~😆\n本篇主要记录一些主要的概念和常用的属性\n\n<!-- more -->\n### 概念\n#### 容器和项目\n> 采用网格布局的区域，称为”容器“（container）。容器内部采用网格定位的子元素，称为”项目“（item）。\n\n#### 行和列\n> 容器里面的水平区域称为”行“（row），垂直区域称为”列“（column）。\n\n#### 单元格\n> 行和列交叉区域，称为”单元格“（cell）。\n\n#### 网格线\n> 划分网格的线，称为”网格线“（grid line）。水平网格线划分出行，垂直网格线划分出列。\n\n### 容器属性\n - `display: grid`  指定一个容器采用网格布局\n - `display: inline-grid` 指定该元素为行内元素，内部采用网格布局\n - `grid-template-columns：10px 20px 30%` 列宽，每个值和每列一一对应，可像素或百分数\n - `grid-template-rows：10px 20px 30%` 行高，每个值和每行一一对应，可像素或百分数\n - `repeat()` 简化重复的值，例：grid-template-rows: repeat(3, 100px);\n - `auto-fill关键字` 自动填充个数，例：grid-template-columns: repeat(auto-fill, 100px);\n - `fr关键字` 比例关系，例：grid-template-columns: 1fr 1fr;\n - `minmax()` 长度范围，例：grid-template-columns: 1fr 1fr minmax(100px, 1fr);\n - `auto关键字` 自定宽度，例：grid-template-columns: 100px auto 100px;\n - `[]可定义网格线名字` 例：grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];\n - `row-gap:10px` 行间距\n - `column-gap: 20px` 列间距\n - `gap: 10px 20px` 行间距和列间距的合并写法\n - `grid-auto-flow: row` 排列顺序，先行后列\n - `grid-auto-flow: row dense` 排列顺序，先行后列，紧密填满\n - `grid-auto-flow: column` 排列顺序，先列后行\n - `grid-auto-flow: column dense` 排列顺序，先列后行，紧密填满\n - `justify-items: start | end | center | stretch;` 设置单元格内容的水平位置（左中右）\n - `align-items: start | end | center | stretch;` 设置单元格内容的垂直位置（上中下）\n - `place-items: <align-items> <justify-items>;` align-items属性和justify-items属性的合并简写形式。例：place-items: start end;\n - `justify-content: start | end | center | stretch | space-around | space-between | space-evenly;` 整个内容区域在容器里面的水平位置（左中右）\n - `align-content: start | end | center | stretch | space-around | space-between | space-evenly;` 整个内容区域的垂直位置（上中下）\n - `place-content: <align-content> <justify-content>` align-content属性和justify-content属性的合并简写形式。\n\n### 项目属性\n - `grid-column-start: 2` 指定项目的左边框所在的垂直网格线\n - `grid-column-end: 3` 指定项目的右边框所在的垂直网格线\n - `grid-row-start: 4` 指定项目的上边框所在的水平网格线\n - `grid-row-end: 5` 指定项目的下边框所在的水平网格线\n - `span关键字` 表示”跨越“，即左右边框（上下边框）之间跨越多少个网格，例：grid-column-start: span 2;\n - `grid-column 属性` 是grid-column-start和grid-column-end的合并简写形式，例：grid-column: 1 / 2;\n - `grid-row 属性` 是grid-row-start属性和grid-row-end的合并简写形式，例：grid-row: 1 / 3;\n - `grid-area 属性` 指定项目放在哪一个区域，例：grid-area: e;\n - `justify-self: start | end | center | stretch` 设置单元格内容的水平位置（左中右）\n - `align-self: start | end | center | stretch` 设置单元格内容的垂直位置（上中下）\n - `place-self: <align-self> <justify-self>` 是align-self属性和justify-self属性的合并简写形式","slug":"grid","published":1,"updated":"2020-11-08T12:49:38.311Z","_id":"ckh945coj0006773z4l9l8iqd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p>\n<p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p>\n<p>以上两段话都是阮一峰大神说的哈~😆<br>本篇主要记录一些主要的概念和常用的属性</p>\n<a id=\"more\"></a>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"容器和项目\"><a href=\"#容器和项目\" class=\"headerlink\" title=\"容器和项目\"></a>容器和项目</h4><blockquote>\n<p>采用网格布局的区域，称为”容器“（container）。容器内部采用网格定位的子元素，称为”项目“（item）。</p>\n</blockquote>\n<h4 id=\"行和列\"><a href=\"#行和列\" class=\"headerlink\" title=\"行和列\"></a>行和列</h4><blockquote>\n<p>容器里面的水平区域称为”行“（row），垂直区域称为”列“（column）。</p>\n</blockquote>\n<h4 id=\"单元格\"><a href=\"#单元格\" class=\"headerlink\" title=\"单元格\"></a>单元格</h4><blockquote>\n<p>行和列交叉区域，称为”单元格“（cell）。</p>\n</blockquote>\n<h4 id=\"网格线\"><a href=\"#网格线\" class=\"headerlink\" title=\"网格线\"></a>网格线</h4><blockquote>\n<p>划分网格的线，称为”网格线“（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>\n</blockquote>\n<h3 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a>容器属性</h3><ul>\n<li><code>display: grid</code>  指定一个容器采用网格布局</li>\n<li><code>display: inline-grid</code> 指定该元素为行内元素，内部采用网格布局</li>\n<li><code>grid-template-columns：10px 20px 30%</code> 列宽，每个值和每列一一对应，可像素或百分数</li>\n<li><code>grid-template-rows：10px 20px 30%</code> 行高，每个值和每行一一对应，可像素或百分数</li>\n<li><code>repeat()</code> 简化重复的值，例：grid-template-rows: repeat(3, 100px);</li>\n<li><code>auto-fill关键字</code> 自动填充个数，例：grid-template-columns: repeat(auto-fill, 100px);</li>\n<li><code>fr关键字</code> 比例关系，例：grid-template-columns: 1fr 1fr;</li>\n<li><code>minmax()</code> 长度范围，例：grid-template-columns: 1fr 1fr minmax(100px, 1fr);</li>\n<li><code>auto关键字</code> 自定宽度，例：grid-template-columns: 100px auto 100px;</li>\n<li><code>[]可定义网格线名字</code> 例：grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];</li>\n<li><code>row-gap:10px</code> 行间距</li>\n<li><code>column-gap: 20px</code> 列间距</li>\n<li><code>gap: 10px 20px</code> 行间距和列间距的合并写法</li>\n<li><code>grid-auto-flow: row</code> 排列顺序，先行后列</li>\n<li><code>grid-auto-flow: row dense</code> 排列顺序，先行后列，紧密填满</li>\n<li><code>grid-auto-flow: column</code> 排列顺序，先列后行</li>\n<li><code>grid-auto-flow: column dense</code> 排列顺序，先列后行，紧密填满</li>\n<li><code>justify-items: start | end | center | stretch;</code> 设置单元格内容的水平位置（左中右）</li>\n<li><code>align-items: start | end | center | stretch;</code> 设置单元格内容的垂直位置（上中下）</li>\n<li><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code> align-items属性和justify-items属性的合并简写形式。例：place-items: start end;</li>\n<li><code>justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</code> 整个内容区域在容器里面的水平位置（左中右）</li>\n<li><code>align-content: start | end | center | stretch | space-around | space-between | space-evenly;</code> 整个内容区域的垂直位置（上中下）</li>\n<li><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code> align-content属性和justify-content属性的合并简写形式。</li>\n</ul>\n<h3 id=\"项目属性\"><a href=\"#项目属性\" class=\"headerlink\" title=\"项目属性\"></a>项目属性</h3><ul>\n<li><code>grid-column-start: 2</code> 指定项目的左边框所在的垂直网格线</li>\n<li><code>grid-column-end: 3</code> 指定项目的右边框所在的垂直网格线</li>\n<li><code>grid-row-start: 4</code> 指定项目的上边框所在的水平网格线</li>\n<li><code>grid-row-end: 5</code> 指定项目的下边框所在的水平网格线</li>\n<li><code>span关键字</code> 表示”跨越“，即左右边框（上下边框）之间跨越多少个网格，例：grid-column-start: span 2;</li>\n<li><code>grid-column 属性</code> 是grid-column-start和grid-column-end的合并简写形式，例：grid-column: 1 / 2;</li>\n<li><code>grid-row 属性</code> 是grid-row-start属性和grid-row-end的合并简写形式，例：grid-row: 1 / 3;</li>\n<li><code>grid-area 属性</code> 指定项目放在哪一个区域，例：grid-area: e;</li>\n<li><code>justify-self: start | end | center | stretch</code> 设置单元格内容的水平位置（左中右）</li>\n<li><code>align-self: start | end | center | stretch</code> 设置单元格内容的垂直位置（上中下）</li>\n<li><code>place-self: &lt;align-self&gt; &lt;justify-self&gt;</code> 是align-self属性和justify-self属性的合并简写形式</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p>\n<p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p>\n<p>以上两段话都是阮一峰大神说的哈~😆<br>本篇主要记录一些主要的概念和常用的属性</p>","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"容器和项目\"><a href=\"#容器和项目\" class=\"headerlink\" title=\"容器和项目\"></a>容器和项目</h4><blockquote>\n<p>采用网格布局的区域，称为”容器“（container）。容器内部采用网格定位的子元素，称为”项目“（item）。</p>\n</blockquote>\n<h4 id=\"行和列\"><a href=\"#行和列\" class=\"headerlink\" title=\"行和列\"></a>行和列</h4><blockquote>\n<p>容器里面的水平区域称为”行“（row），垂直区域称为”列“（column）。</p>\n</blockquote>\n<h4 id=\"单元格\"><a href=\"#单元格\" class=\"headerlink\" title=\"单元格\"></a>单元格</h4><blockquote>\n<p>行和列交叉区域，称为”单元格“（cell）。</p>\n</blockquote>\n<h4 id=\"网格线\"><a href=\"#网格线\" class=\"headerlink\" title=\"网格线\"></a>网格线</h4><blockquote>\n<p>划分网格的线，称为”网格线“（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>\n</blockquote>\n<h3 id=\"容器属性\"><a href=\"#容器属性\" class=\"headerlink\" title=\"容器属性\"></a>容器属性</h3><ul>\n<li><code>display: grid</code>  指定一个容器采用网格布局</li>\n<li><code>display: inline-grid</code> 指定该元素为行内元素，内部采用网格布局</li>\n<li><code>grid-template-columns：10px 20px 30%</code> 列宽，每个值和每列一一对应，可像素或百分数</li>\n<li><code>grid-template-rows：10px 20px 30%</code> 行高，每个值和每行一一对应，可像素或百分数</li>\n<li><code>repeat()</code> 简化重复的值，例：grid-template-rows: repeat(3, 100px);</li>\n<li><code>auto-fill关键字</code> 自动填充个数，例：grid-template-columns: repeat(auto-fill, 100px);</li>\n<li><code>fr关键字</code> 比例关系，例：grid-template-columns: 1fr 1fr;</li>\n<li><code>minmax()</code> 长度范围，例：grid-template-columns: 1fr 1fr minmax(100px, 1fr);</li>\n<li><code>auto关键字</code> 自定宽度，例：grid-template-columns: 100px auto 100px;</li>\n<li><code>[]可定义网格线名字</code> 例：grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];</li>\n<li><code>row-gap:10px</code> 行间距</li>\n<li><code>column-gap: 20px</code> 列间距</li>\n<li><code>gap: 10px 20px</code> 行间距和列间距的合并写法</li>\n<li><code>grid-auto-flow: row</code> 排列顺序，先行后列</li>\n<li><code>grid-auto-flow: row dense</code> 排列顺序，先行后列，紧密填满</li>\n<li><code>grid-auto-flow: column</code> 排列顺序，先列后行</li>\n<li><code>grid-auto-flow: column dense</code> 排列顺序，先列后行，紧密填满</li>\n<li><code>justify-items: start | end | center | stretch;</code> 设置单元格内容的水平位置（左中右）</li>\n<li><code>align-items: start | end | center | stretch;</code> 设置单元格内容的垂直位置（上中下）</li>\n<li><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code> align-items属性和justify-items属性的合并简写形式。例：place-items: start end;</li>\n<li><code>justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</code> 整个内容区域在容器里面的水平位置（左中右）</li>\n<li><code>align-content: start | end | center | stretch | space-around | space-between | space-evenly;</code> 整个内容区域的垂直位置（上中下）</li>\n<li><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code> align-content属性和justify-content属性的合并简写形式。</li>\n</ul>\n<h3 id=\"项目属性\"><a href=\"#项目属性\" class=\"headerlink\" title=\"项目属性\"></a>项目属性</h3><ul>\n<li><code>grid-column-start: 2</code> 指定项目的左边框所在的垂直网格线</li>\n<li><code>grid-column-end: 3</code> 指定项目的右边框所在的垂直网格线</li>\n<li><code>grid-row-start: 4</code> 指定项目的上边框所在的水平网格线</li>\n<li><code>grid-row-end: 5</code> 指定项目的下边框所在的水平网格线</li>\n<li><code>span关键字</code> 表示”跨越“，即左右边框（上下边框）之间跨越多少个网格，例：grid-column-start: span 2;</li>\n<li><code>grid-column 属性</code> 是grid-column-start和grid-column-end的合并简写形式，例：grid-column: 1 / 2;</li>\n<li><code>grid-row 属性</code> 是grid-row-start属性和grid-row-end的合并简写形式，例：grid-row: 1 / 3;</li>\n<li><code>grid-area 属性</code> 指定项目放在哪一个区域，例：grid-area: e;</li>\n<li><code>justify-self: start | end | center | stretch</code> 设置单元格内容的水平位置（左中右）</li>\n<li><code>align-self: start | end | center | stretch</code> 设置单元格内容的垂直位置（上中下）</li>\n<li><code>place-self: &lt;align-self&gt; &lt;justify-self&gt;</code> 是align-self属性和justify-self属性的合并简写形式</li>\n</ul>"},{"title":"EventLoop 的简单理解","date":"2020-07-28T02:13:09.000Z","_content":"\n### EventLoop是什么\n> 一个循环 每次循环叫tick 每次循环的代码叫task\n\n- V8引擎单线程无法同时干两件事\n- 文件读取、网络IO缓慢且具有不确定性\n- 要通过异步回调方式处理又称为异步IO\n- 先同步再异步 异步放入队列等同步完成后再执行 每次循环叫一个tick(process.nextTick())\n\n<!-- more -->\n\n### 异步任务的区分\nmicrotasks(微任务)：\n> 唯一，整个事件循环中仅存在一个；执行为同步，同一个事件循环中的microtasks会按队列顺序串行执行完毕\n- process.nextTick\n- promise\n- Object.observe\n- MutationObserver\n\nmacrotask(宏任务)：\n- setTimeout\n- serInterval\n- setImmediate\n- I/O\n- UI渲染\n\n> 先执行微任务 再执行宏任务\n\n如果遇到async的代码 await后面的程序就挂起 类似于微任务 等到后面的同步任务执行完了再执行\n\n最后上一个小栗子🌰\n```\n(new Promise(resolve => {\n  console.log('resolve')\n  resolve()\n}))\n.then(() => console.log('promise then ...'))\n\nasync function fun(){\n  console.log(\"fun start\")\n  const aa = await 1 // 到这里挂起，后面先不执行\n  console.log(\"fun end\")\n}\nfun()\n\n// setTimeout 放入event table中 1秒后将回调函数放入宏任务的event queue中\nsetTimeout(() => {\n  console.log('setTimeout ...')\n}, 0)\n\nprocess.nextTick(() => {\n  console.log('nextTick ...')\n})\n\nconsole.log('console ...')\n\n\n// output\nresolve\nfun start\nconsole ...\nnextTick ...\npromise then ...\nfun end\nsetTimeout ...\n```","source":"_posts/eventLoop.md","raw":"---\ntitle: EventLoop 的简单理解\ndate: 2020-07-28 10:13:09\ntags: js\ncategories: js\n---\n\n### EventLoop是什么\n> 一个循环 每次循环叫tick 每次循环的代码叫task\n\n- V8引擎单线程无法同时干两件事\n- 文件读取、网络IO缓慢且具有不确定性\n- 要通过异步回调方式处理又称为异步IO\n- 先同步再异步 异步放入队列等同步完成后再执行 每次循环叫一个tick(process.nextTick())\n\n<!-- more -->\n\n### 异步任务的区分\nmicrotasks(微任务)：\n> 唯一，整个事件循环中仅存在一个；执行为同步，同一个事件循环中的microtasks会按队列顺序串行执行完毕\n- process.nextTick\n- promise\n- Object.observe\n- MutationObserver\n\nmacrotask(宏任务)：\n- setTimeout\n- serInterval\n- setImmediate\n- I/O\n- UI渲染\n\n> 先执行微任务 再执行宏任务\n\n如果遇到async的代码 await后面的程序就挂起 类似于微任务 等到后面的同步任务执行完了再执行\n\n最后上一个小栗子🌰\n```\n(new Promise(resolve => {\n  console.log('resolve')\n  resolve()\n}))\n.then(() => console.log('promise then ...'))\n\nasync function fun(){\n  console.log(\"fun start\")\n  const aa = await 1 // 到这里挂起，后面先不执行\n  console.log(\"fun end\")\n}\nfun()\n\n// setTimeout 放入event table中 1秒后将回调函数放入宏任务的event queue中\nsetTimeout(() => {\n  console.log('setTimeout ...')\n}, 0)\n\nprocess.nextTick(() => {\n  console.log('nextTick ...')\n})\n\nconsole.log('console ...')\n\n\n// output\nresolve\nfun start\nconsole ...\nnextTick ...\npromise then ...\nfun end\nsetTimeout ...\n```","slug":"eventLoop","published":1,"updated":"2020-09-04T02:15:23.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945col0008773zi0c4t2sw","content":"<h3 id=\"EventLoop是什么\"><a href=\"#EventLoop是什么\" class=\"headerlink\" title=\"EventLoop是什么\"></a>EventLoop是什么</h3><blockquote>\n<p>一个循环 每次循环叫tick 每次循环的代码叫task</p>\n</blockquote>\n<ul>\n<li>V8引擎单线程无法同时干两件事</li>\n<li>文件读取、网络IO缓慢且具有不确定性</li>\n<li>要通过异步回调方式处理又称为异步IO</li>\n<li>先同步再异步 异步放入队列等同步完成后再执行 每次循环叫一个tick(process.nextTick())</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"异步任务的区分\"><a href=\"#异步任务的区分\" class=\"headerlink\" title=\"异步任务的区分\"></a>异步任务的区分</h3><p>microtasks(微任务)：</p>\n<blockquote>\n<p>唯一，整个事件循环中仅存在一个；执行为同步，同一个事件循环中的microtasks会按队列顺序串行执行完毕</p>\n<ul>\n<li>process.nextTick</li>\n<li>promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n</blockquote>\n<p>macrotask(宏任务)：</p>\n<ul>\n<li>setTimeout</li>\n<li>serInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI渲染</li>\n</ul>\n<blockquote>\n<p>先执行微任务 再执行宏任务</p>\n</blockquote>\n<p>如果遇到async的代码 await后面的程序就挂起 类似于微任务 等到后面的同步任务执行完了再执行</p>\n<p>最后上一个小栗子🌰<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolve'</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise then ...'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fun start\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> aa = <span class=\"keyword\">await</span> <span class=\"number\">1</span> <span class=\"comment\">// 到这里挂起，后面先不执行</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fun end\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setTimeout 放入event table中 1秒后将回调函数放入宏任务的event queue中</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout ...'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick ...'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'console ...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">resolve</span><br><span class=\"line\">fun start</span><br><span class=\"line\"><span class=\"built_in\">console</span> ...</span><br><span class=\"line\">nextTick ...</span><br><span class=\"line\">promise then ...</span><br><span class=\"line\">fun end</span><br><span class=\"line\">setTimeout ...</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"EventLoop是什么\"><a href=\"#EventLoop是什么\" class=\"headerlink\" title=\"EventLoop是什么\"></a>EventLoop是什么</h3><blockquote>\n<p>一个循环 每次循环叫tick 每次循环的代码叫task</p>\n</blockquote>\n<ul>\n<li>V8引擎单线程无法同时干两件事</li>\n<li>文件读取、网络IO缓慢且具有不确定性</li>\n<li>要通过异步回调方式处理又称为异步IO</li>\n<li>先同步再异步 异步放入队列等同步完成后再执行 每次循环叫一个tick(process.nextTick())</li>\n</ul>","more":"<h3 id=\"异步任务的区分\"><a href=\"#异步任务的区分\" class=\"headerlink\" title=\"异步任务的区分\"></a>异步任务的区分</h3><p>microtasks(微任务)：</p>\n<blockquote>\n<p>唯一，整个事件循环中仅存在一个；执行为同步，同一个事件循环中的microtasks会按队列顺序串行执行完毕</p>\n<ul>\n<li>process.nextTick</li>\n<li>promise</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n</blockquote>\n<p>macrotask(宏任务)：</p>\n<ul>\n<li>setTimeout</li>\n<li>serInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI渲染</li>\n</ul>\n<blockquote>\n<p>先执行微任务 再执行宏任务</p>\n</blockquote>\n<p>如果遇到async的代码 await后面的程序就挂起 类似于微任务 等到后面的同步任务执行完了再执行</p>\n<p>最后上一个小栗子🌰<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolve'</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise then ...'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fun start\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> aa = <span class=\"keyword\">await</span> <span class=\"number\">1</span> <span class=\"comment\">// 到这里挂起，后面先不执行</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fun end\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setTimeout 放入event table中 1秒后将回调函数放入宏任务的event queue中</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout ...'</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick ...'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'console ...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">resolve</span><br><span class=\"line\">fun start</span><br><span class=\"line\"><span class=\"built_in\">console</span> ...</span><br><span class=\"line\">nextTick ...</span><br><span class=\"line\">promise then ...</span><br><span class=\"line\">fun end</span><br><span class=\"line\">setTimeout ...</span><br></pre></td></tr></table></figure></p>"},{"title":"vue+koa+mysql实现一个简单的todolist","date":"2020-08-25T02:41:27.000Z","_content":"\n## Start\n\n构建一个数据通过 `koa` 的api获取，页面通过 `vue` 渲染的前后端都有的完整demo。包括一个登陆页面和一个todolist页面的增删改查，其中用到了前端 `Vue框架` 、`koa` 提供接口、验证 `token`、`sequelize` 操作 `mysql` 等，这里记录一些关键点。\n\n<!-- more -->\n## 初始化\n\n这里用到的是vue-cli2的webpack，项目创建好之后执行\n```\nyarn \nyarn add koa koa-router koa-logger koa-json koa-bodyparser nodemon vue-router element-ui axios koa-jwt bcrypt kao-static\n```\n> 在根目录下创建server文件夹，及子文件夹\n> - config（数据库配置）\n> - controllers（控制层，根据页面的请求选取\"数据层\"中相应的数据，然后返回给页面）\n> - models（数据层，将数据库和表结构连起来）\n> - routes（路由）\n> - schema（表结构）\n\n> 在根目录下创建app.js作为koa的启动文件（具体代码见项目）\n\n后端：在控制台输入 `nodemon app.js`, 输出`Koa is listening in 8889`说明启动成功，并在8889端口监听。\n前端：在控制台输入 `npm run dev` 后在 `localhost:8080` 可以展示前端页面。\n\n\n## mysql\n可以去官网下载`mysql`，我用到的可视化工具是`MySQLWorkbench`\n\n安装好后开始创建数据表。用户表：用于登录验证。待办事项表用于展示待办事项。\n\nuser表：\n\n| 字段           | 类型                                                  |\n| -------------- | ----------------------------------------------------- |\n| id(用戶id) | int(自增)                                              |\n| user_name(用户名)       | CHAR(50)            |\n| password(密码)   | CHAR(128)                            |\n—\n\nlist表：\n\n| 字段           | 类型                                                  |\n| -------------- | ----------------------------------------------------- |\n| id(list的id) | int(自增)                                              |\n| user_id(用户id)       | int(11)            |\n| content(代办内容)    | CHAR(255)                            |\n| status(代办状态)    | tinyint(1)                            |\n—\n\n## Sequelize\n`sequelize` 理解为用简单的方式操作数据库的ORM框架。\n\n`server/schema` 下新建两个文件，user.js和list.js，是数据库的两张表结构，可使用sequelize-auto直接导出表结构。\n\n在`server/config`下新建db.js, 用于初始化Sequelize和数据库的连接（具体代码见项目）\n\n## JSON-WEB-TOKEN\n运用了JSON-WEB-TOKEN的登录系统应该是这样的：\n> 1. 用户在登录页输入账号密码，将账号密码（加密后）发送请求给后端\n> 2. 后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。\n> 3. 如果登录成功，客户端将token用某种方式存下来，之后要请求其他资源的时候，在请求头里带上这个token。\n> 4. 后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。\n\n通过这个token的方式，客户端和服务端之间的访问，是无状态的。也就是服务端不知道你这个用户到底在不在线，只要你发送的请求头里的token是正确的我就给你返回你想要的资源。这样能够不占用服务端的空间资源，而且如果涉及到服务器集群，如果服务器进行维护或者迁移或者需要CDN节点的分配的话，`无状态`的设计显然维护成本更低。\n\n```\n<!-- 用法 -->\n\nconst secret = 'vue-koa-demo' // 指定密钥，这是之后用来判断token合法性的标志\n\njwt.sign(userToken, secret) // 签发token\n\njwt.decode(token) // 解析token\n```\n\n## 密码加密\nmd5加密容易被破解，所以准备采用`bcrypt`的加密方式，全部走后端加密。\n```\n// 验证密码是否正确\nbcrypt.compareSync(data.password, userInfo.password)\n```\n\n## Token的发送与验证\n在全局发送请求`Header`上加入`Authorization`属性， 值是`Bearer token值`\n```\nVue.prototype.$http.defaults.headers.common['Authorization'] = 'Bearer ' + token\n```\n/api/* 都需要走token验证\n```\nkoa.use(\"/api\",jwt({secret: 'vue-koa-demo'}),api.routes()) // 所有走/api/打头的请求都需要经过jwt中间件的验证。secret密钥必须跟我们当初签发的secret一致\n```\n\n## Koa serve静态资源\n项目`npm run dev`打包后\n```\nconst serve = require('koa-static')\n\napp.use(serve(path.join(__dirname, 'dist'))) // 将webpack打包好的项目目录作为Koa静态文件服务的目录\n```\n这样不用启前端项目，localhost:8889就可以访问打包好的静态资源页面。\n\n\n## End\n这是一个前后端都有的完整小demo，结构清晰简单的小东西更容易理解和入门，完整项目[Github地址](https://github.com/Yu-Lxy/Daily_practice/tree/master/koa)。","source":"_posts/koa.md","raw":"---\ntitle: vue+koa+mysql实现一个简单的todolist\ndate: 2020-08-25 10:41:27\ntags: \n- vue\n- koa\ncategories: koa\n---\n\n## Start\n\n构建一个数据通过 `koa` 的api获取，页面通过 `vue` 渲染的前后端都有的完整demo。包括一个登陆页面和一个todolist页面的增删改查，其中用到了前端 `Vue框架` 、`koa` 提供接口、验证 `token`、`sequelize` 操作 `mysql` 等，这里记录一些关键点。\n\n<!-- more -->\n## 初始化\n\n这里用到的是vue-cli2的webpack，项目创建好之后执行\n```\nyarn \nyarn add koa koa-router koa-logger koa-json koa-bodyparser nodemon vue-router element-ui axios koa-jwt bcrypt kao-static\n```\n> 在根目录下创建server文件夹，及子文件夹\n> - config（数据库配置）\n> - controllers（控制层，根据页面的请求选取\"数据层\"中相应的数据，然后返回给页面）\n> - models（数据层，将数据库和表结构连起来）\n> - routes（路由）\n> - schema（表结构）\n\n> 在根目录下创建app.js作为koa的启动文件（具体代码见项目）\n\n后端：在控制台输入 `nodemon app.js`, 输出`Koa is listening in 8889`说明启动成功，并在8889端口监听。\n前端：在控制台输入 `npm run dev` 后在 `localhost:8080` 可以展示前端页面。\n\n\n## mysql\n可以去官网下载`mysql`，我用到的可视化工具是`MySQLWorkbench`\n\n安装好后开始创建数据表。用户表：用于登录验证。待办事项表用于展示待办事项。\n\nuser表：\n\n| 字段           | 类型                                                  |\n| -------------- | ----------------------------------------------------- |\n| id(用戶id) | int(自增)                                              |\n| user_name(用户名)       | CHAR(50)            |\n| password(密码)   | CHAR(128)                            |\n—\n\nlist表：\n\n| 字段           | 类型                                                  |\n| -------------- | ----------------------------------------------------- |\n| id(list的id) | int(自增)                                              |\n| user_id(用户id)       | int(11)            |\n| content(代办内容)    | CHAR(255)                            |\n| status(代办状态)    | tinyint(1)                            |\n—\n\n## Sequelize\n`sequelize` 理解为用简单的方式操作数据库的ORM框架。\n\n`server/schema` 下新建两个文件，user.js和list.js，是数据库的两张表结构，可使用sequelize-auto直接导出表结构。\n\n在`server/config`下新建db.js, 用于初始化Sequelize和数据库的连接（具体代码见项目）\n\n## JSON-WEB-TOKEN\n运用了JSON-WEB-TOKEN的登录系统应该是这样的：\n> 1. 用户在登录页输入账号密码，将账号密码（加密后）发送请求给后端\n> 2. 后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。\n> 3. 如果登录成功，客户端将token用某种方式存下来，之后要请求其他资源的时候，在请求头里带上这个token。\n> 4. 后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。\n\n通过这个token的方式，客户端和服务端之间的访问，是无状态的。也就是服务端不知道你这个用户到底在不在线，只要你发送的请求头里的token是正确的我就给你返回你想要的资源。这样能够不占用服务端的空间资源，而且如果涉及到服务器集群，如果服务器进行维护或者迁移或者需要CDN节点的分配的话，`无状态`的设计显然维护成本更低。\n\n```\n<!-- 用法 -->\n\nconst secret = 'vue-koa-demo' // 指定密钥，这是之后用来判断token合法性的标志\n\njwt.sign(userToken, secret) // 签发token\n\njwt.decode(token) // 解析token\n```\n\n## 密码加密\nmd5加密容易被破解，所以准备采用`bcrypt`的加密方式，全部走后端加密。\n```\n// 验证密码是否正确\nbcrypt.compareSync(data.password, userInfo.password)\n```\n\n## Token的发送与验证\n在全局发送请求`Header`上加入`Authorization`属性， 值是`Bearer token值`\n```\nVue.prototype.$http.defaults.headers.common['Authorization'] = 'Bearer ' + token\n```\n/api/* 都需要走token验证\n```\nkoa.use(\"/api\",jwt({secret: 'vue-koa-demo'}),api.routes()) // 所有走/api/打头的请求都需要经过jwt中间件的验证。secret密钥必须跟我们当初签发的secret一致\n```\n\n## Koa serve静态资源\n项目`npm run dev`打包后\n```\nconst serve = require('koa-static')\n\napp.use(serve(path.join(__dirname, 'dist'))) // 将webpack打包好的项目目录作为Koa静态文件服务的目录\n```\n这样不用启前端项目，localhost:8889就可以访问打包好的静态资源页面。\n\n\n## End\n这是一个前后端都有的完整小demo，结构清晰简单的小东西更容易理解和入门，完整项目[Github地址](https://github.com/Yu-Lxy/Daily_practice/tree/master/koa)。","slug":"koa","published":1,"updated":"2020-09-04T07:31:36.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945com0009773zsj6ijpsq","content":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>构建一个数据通过 <code>koa</code> 的api获取，页面通过 <code>vue</code> 渲染的前后端都有的完整demo。包括一个登陆页面和一个todolist页面的增删改查，其中用到了前端 <code>Vue框架</code> 、<code>koa</code> 提供接口、验证 <code>token</code>、<code>sequelize</code> 操作 <code>mysql</code> 等，这里记录一些关键点。</p>\n<a id=\"more\"></a>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>这里用到的是vue-cli2的webpack，项目创建好之后执行<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn </span><br><span class=\"line\">yarn <span class=\"keyword\">add </span>koa koa-router koa-logger koa-<span class=\"keyword\">json </span>koa-<span class=\"keyword\">bodyparser </span>nodemon vue-router element-ui axios koa-<span class=\"keyword\">jwt </span><span class=\"keyword\">bcrypt </span>kao-static</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在根目录下创建server文件夹，及子文件夹</p>\n<ul>\n<li>config（数据库配置）</li>\n<li>controllers（控制层，根据页面的请求选取”数据层”中相应的数据，然后返回给页面）</li>\n<li>models（数据层，将数据库和表结构连起来）</li>\n<li>routes（路由）</li>\n<li>schema（表结构）</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>在根目录下创建app.js作为koa的启动文件（具体代码见项目）</p>\n</blockquote>\n<p>后端：在控制台输入 <code>nodemon app.js</code>, 输出<code>Koa is listening in 8889</code>说明启动成功，并在8889端口监听。<br>前端：在控制台输入 <code>npm run dev</code> 后在 <code>localhost:8080</code> 可以展示前端页面。</p>\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p>可以去官网下载<code>mysql</code>，我用到的可视化工具是<code>MySQLWorkbench</code></p>\n<p>安装好后开始创建数据表。用户表：用于登录验证。待办事项表用于展示待办事项。</p>\n<p>user表：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id(用戶id)</td>\n<td>int(自增)</td>\n</tr>\n<tr>\n<td>user_name(用户名)</td>\n<td>CHAR(50)</td>\n</tr>\n<tr>\n<td>password(密码)</td>\n<td>CHAR(128)</td>\n</tr>\n</tbody>\n</table>\n<p>—</p>\n<p>list表：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id(list的id)</td>\n<td>int(自增)</td>\n</tr>\n<tr>\n<td>user_id(用户id)</td>\n<td>int(11)</td>\n</tr>\n<tr>\n<td>content(代办内容)</td>\n<td>CHAR(255)</td>\n</tr>\n<tr>\n<td>status(代办状态)</td>\n<td>tinyint(1)</td>\n</tr>\n</tbody>\n</table>\n<p>—</p>\n<h2 id=\"Sequelize\"><a href=\"#Sequelize\" class=\"headerlink\" title=\"Sequelize\"></a>Sequelize</h2><p><code>sequelize</code> 理解为用简单的方式操作数据库的ORM框架。</p>\n<p><code>server/schema</code> 下新建两个文件，user.js和list.js，是数据库的两张表结构，可使用sequelize-auto直接导出表结构。</p>\n<p>在<code>server/config</code>下新建db.js, 用于初始化Sequelize和数据库的连接（具体代码见项目）</p>\n<h2 id=\"JSON-WEB-TOKEN\"><a href=\"#JSON-WEB-TOKEN\" class=\"headerlink\" title=\"JSON-WEB-TOKEN\"></a>JSON-WEB-TOKEN</h2><p>运用了JSON-WEB-TOKEN的登录系统应该是这样的：</p>\n<blockquote>\n<ol>\n<li>用户在登录页输入账号密码，将账号密码（加密后）发送请求给后端</li>\n<li>后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。</li>\n<li>如果登录成功，客户端将token用某种方式存下来，之后要请求其他资源的时候，在请求头里带上这个token。</li>\n<li>后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。</li>\n</ol>\n</blockquote>\n<p>通过这个token的方式，客户端和服务端之间的访问，是无状态的。也就是服务端不知道你这个用户到底在不在线，只要你发送的请求头里的token是正确的我就给你返回你想要的资源。这样能够不占用服务端的空间资源，而且如果涉及到服务器集群，如果服务器进行维护或者迁移或者需要CDN节点的分配的话，<code>无状态</code>的设计显然维护成本更低。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 用法 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">const secret = 'vue-koa-demo' // 指定密钥，这是之后用来判断token合法性的标志</span><br><span class=\"line\"></span><br><span class=\"line\">jwt.sign(userToken, secret) // 签发token</span><br><span class=\"line\"></span><br><span class=\"line\">jwt.decode(token) // 解析token</span><br></pre></td></tr></table></figure>\n<h2 id=\"密码加密\"><a href=\"#密码加密\" class=\"headerlink\" title=\"密码加密\"></a>密码加密</h2><p>md5加密容易被破解，所以准备采用<code>bcrypt</code>的加密方式，全部走后端加密。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证密码是否正确</span></span><br><span class=\"line\">bcrypt.compareSync(data<span class=\"selector-class\">.password</span>, userInfo.password)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Token的发送与验证\"><a href=\"#Token的发送与验证\" class=\"headerlink\" title=\"Token的发送与验证\"></a>Token的发送与验证</h2><p>在全局发送请求<code>Header</code>上加入<code>Authorization</code>属性， 值是<code>Bearer token值</code><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue<span class=\"selector-class\">.prototype</span>.<span class=\"variable\">$http</span><span class=\"selector-class\">.defaults</span><span class=\"selector-class\">.headers</span><span class=\"selector-class\">.common</span>[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">'Bearer '</span> + token</span><br></pre></td></tr></table></figure></p>\n<p>/api/* 都需要走token验证<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">koa</span><span class=\"selector-class\">.use</span>(<span class=\"string\">\"/api\"</span>,jwt(&#123;<span class=\"attribute\">secret</span>: <span class=\"string\">'vue-koa-demo'</span>&#125;),api.routes()) <span class=\"comment\">// 所有走/api/打头的请求都需要经过jwt中间件的验证。secret密钥必须跟我们当初签发的secret一致</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Koa-serve静态资源\"><a href=\"#Koa-serve静态资源\" class=\"headerlink\" title=\"Koa serve静态资源\"></a>Koa serve静态资源</h2><p>项目<code>npm run dev</code>打包后<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(serve(path.join(__dirname, <span class=\"string\">'dist'</span>))) <span class=\"comment\">// 将webpack打包好的项目目录作为Koa静态文件服务的目录</span></span><br></pre></td></tr></table></figure></p>\n<p>这样不用启前端项目，localhost:8889就可以访问打包好的静态资源页面。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>这是一个前后端都有的完整小demo，结构清晰简单的小东西更容易理解和入门，完整项目<a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/koa\" target=\"_blank\" rel=\"noopener\">Github地址</a>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>构建一个数据通过 <code>koa</code> 的api获取，页面通过 <code>vue</code> 渲染的前后端都有的完整demo。包括一个登陆页面和一个todolist页面的增删改查，其中用到了前端 <code>Vue框架</code> 、<code>koa</code> 提供接口、验证 <code>token</code>、<code>sequelize</code> 操作 <code>mysql</code> 等，这里记录一些关键点。</p>","more":"<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>这里用到的是vue-cli2的webpack，项目创建好之后执行<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn </span><br><span class=\"line\">yarn <span class=\"keyword\">add </span>koa koa-router koa-logger koa-<span class=\"keyword\">json </span>koa-<span class=\"keyword\">bodyparser </span>nodemon vue-router element-ui axios koa-<span class=\"keyword\">jwt </span><span class=\"keyword\">bcrypt </span>kao-static</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在根目录下创建server文件夹，及子文件夹</p>\n<ul>\n<li>config（数据库配置）</li>\n<li>controllers（控制层，根据页面的请求选取”数据层”中相应的数据，然后返回给页面）</li>\n<li>models（数据层，将数据库和表结构连起来）</li>\n<li>routes（路由）</li>\n<li>schema（表结构）</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>在根目录下创建app.js作为koa的启动文件（具体代码见项目）</p>\n</blockquote>\n<p>后端：在控制台输入 <code>nodemon app.js</code>, 输出<code>Koa is listening in 8889</code>说明启动成功，并在8889端口监听。<br>前端：在控制台输入 <code>npm run dev</code> 后在 <code>localhost:8080</code> 可以展示前端页面。</p>\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p>可以去官网下载<code>mysql</code>，我用到的可视化工具是<code>MySQLWorkbench</code></p>\n<p>安装好后开始创建数据表。用户表：用于登录验证。待办事项表用于展示待办事项。</p>\n<p>user表：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id(用戶id)</td>\n<td>int(自增)</td>\n</tr>\n<tr>\n<td>user_name(用户名)</td>\n<td>CHAR(50)</td>\n</tr>\n<tr>\n<td>password(密码)</td>\n<td>CHAR(128)</td>\n</tr>\n</tbody>\n</table>\n<p>—</p>\n<p>list表：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id(list的id)</td>\n<td>int(自增)</td>\n</tr>\n<tr>\n<td>user_id(用户id)</td>\n<td>int(11)</td>\n</tr>\n<tr>\n<td>content(代办内容)</td>\n<td>CHAR(255)</td>\n</tr>\n<tr>\n<td>status(代办状态)</td>\n<td>tinyint(1)</td>\n</tr>\n</tbody>\n</table>\n<p>—</p>\n<h2 id=\"Sequelize\"><a href=\"#Sequelize\" class=\"headerlink\" title=\"Sequelize\"></a>Sequelize</h2><p><code>sequelize</code> 理解为用简单的方式操作数据库的ORM框架。</p>\n<p><code>server/schema</code> 下新建两个文件，user.js和list.js，是数据库的两张表结构，可使用sequelize-auto直接导出表结构。</p>\n<p>在<code>server/config</code>下新建db.js, 用于初始化Sequelize和数据库的连接（具体代码见项目）</p>\n<h2 id=\"JSON-WEB-TOKEN\"><a href=\"#JSON-WEB-TOKEN\" class=\"headerlink\" title=\"JSON-WEB-TOKEN\"></a>JSON-WEB-TOKEN</h2><p>运用了JSON-WEB-TOKEN的登录系统应该是这样的：</p>\n<blockquote>\n<ol>\n<li>用户在登录页输入账号密码，将账号密码（加密后）发送请求给后端</li>\n<li>后端验证一下用户的账号和密码的信息，如果符合就发一个token返回给客户端，如果不符合就不发送token，返回验证错误信息。</li>\n<li>如果登录成功，客户端将token用某种方式存下来，之后要请求其他资源的时候，在请求头里带上这个token。</li>\n<li>后端收到请求信息，先验证下token是否有效，有效则下发请求的资源，无效则返回验证错误。</li>\n</ol>\n</blockquote>\n<p>通过这个token的方式，客户端和服务端之间的访问，是无状态的。也就是服务端不知道你这个用户到底在不在线，只要你发送的请求头里的token是正确的我就给你返回你想要的资源。这样能够不占用服务端的空间资源，而且如果涉及到服务器集群，如果服务器进行维护或者迁移或者需要CDN节点的分配的话，<code>无状态</code>的设计显然维护成本更低。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 用法 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">const secret = 'vue-koa-demo' // 指定密钥，这是之后用来判断token合法性的标志</span><br><span class=\"line\"></span><br><span class=\"line\">jwt.sign(userToken, secret) // 签发token</span><br><span class=\"line\"></span><br><span class=\"line\">jwt.decode(token) // 解析token</span><br></pre></td></tr></table></figure>\n<h2 id=\"密码加密\"><a href=\"#密码加密\" class=\"headerlink\" title=\"密码加密\"></a>密码加密</h2><p>md5加密容易被破解，所以准备采用<code>bcrypt</code>的加密方式，全部走后端加密。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证密码是否正确</span></span><br><span class=\"line\">bcrypt.compareSync(data<span class=\"selector-class\">.password</span>, userInfo.password)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Token的发送与验证\"><a href=\"#Token的发送与验证\" class=\"headerlink\" title=\"Token的发送与验证\"></a>Token的发送与验证</h2><p>在全局发送请求<code>Header</code>上加入<code>Authorization</code>属性， 值是<code>Bearer token值</code><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue<span class=\"selector-class\">.prototype</span>.<span class=\"variable\">$http</span><span class=\"selector-class\">.defaults</span><span class=\"selector-class\">.headers</span><span class=\"selector-class\">.common</span>[<span class=\"string\">'Authorization'</span>] = <span class=\"string\">'Bearer '</span> + token</span><br></pre></td></tr></table></figure></p>\n<p>/api/* 都需要走token验证<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">koa</span><span class=\"selector-class\">.use</span>(<span class=\"string\">\"/api\"</span>,jwt(&#123;<span class=\"attribute\">secret</span>: <span class=\"string\">'vue-koa-demo'</span>&#125;),api.routes()) <span class=\"comment\">// 所有走/api/打头的请求都需要经过jwt中间件的验证。secret密钥必须跟我们当初签发的secret一致</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Koa-serve静态资源\"><a href=\"#Koa-serve静态资源\" class=\"headerlink\" title=\"Koa serve静态资源\"></a>Koa serve静态资源</h2><p>项目<code>npm run dev</code>打包后<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-static'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(serve(path.join(__dirname, <span class=\"string\">'dist'</span>))) <span class=\"comment\">// 将webpack打包好的项目目录作为Koa静态文件服务的目录</span></span><br></pre></td></tr></table></figure></p>\n<p>这样不用启前端项目，localhost:8889就可以访问打包好的静态资源页面。</p>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>这是一个前后端都有的完整小demo，结构清晰简单的小东西更容易理解和入门，完整项目<a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/koa\" target=\"_blank\" rel=\"noopener\">Github地址</a>。</p>"},{"title":"vue+vue-ueditor-wrap+秀米","date":"2019-09-03T09:44:15.000Z","_content":"我们的项目中使用的是ueditor+秀米的富文本编辑器，github上的大神做了一个基于vue的ueditor的组件，能够实现双向数据绑定，可以不用费劲的getContent、setContent。就决定用这个组件 ——  [vue-ueditor-wrap](https://github.com/HaoChuan9421/vue-ueditor-wrap)\t。so~  vue+vue-ueditor-wrap+秀米. 开始吧 ⤵︎\n\n<!-- more -->\n\n**一：去ueditor官网下载官方源码** \n\n1. https://ueditor.baidu.com/website/download.html\n\n2. 下载完成后，放到你的Vue项目里static下并命名为UEditor。\n\n**二：安装vue-ueditor-wrap** \n\n```javascript\nnpm i vue-ueditor-wrap\n```\n**三：引入并使用** \n1. main.js\n```javascript\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\n// 引入ueditor的依赖文件\nimport '../static/UEditor/ueditor.config'\nimport '../static/UEditor/ueditor.all.min.js'\nimport '../static/UEditor/lang/zh-cn/zh-cn.js'\nimport '../static/UEditor/ueditor.parse.min.js'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '<App/>'\n})\n\n```\n2. 组件里\n```javascript\n<template>\n  <div class=\"hello\">\n  \t<!--数据绑定-->\n    <vue-ueditor-wrap v-model=\"msg\" />\n    <span>{{msg}}</span>\n  </div>\n</template>\n\n<script>\nimport VueUeditorWrap from 'vue-ueditor-wrap' // 引入vue-ueditor-wrap\nexport default {\n  name: 'HelloWorld',\n  components: {\n    VueUeditorWrap\t//注册组件\n  },\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n```\n这些完成后，你就可以看到一个初始化好的`ueditor`了，并且可以很方便的绑定想要的数据 ?\n接入**秀米**的童鞋继续向下看?\n\n**四：在ueditor基础上接入秀米**\n\n秀米提供：[秀米图文排版UEditor插件示例](http://hgs.xiumi.us/uedit/)\n\n1. 在你的index.html中引用 `http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.js` 和 `http://xiumi.us/connect/ue/xiumi-ue-v5.css` 也可以下载文件后放在UEditor目录下引入本地文件，这样方便修改。（我是下载后引入本地的）如下\n```javascript\n<link rel=\"stylesheet\" href=\"static/UEditor/xiumi-ue-v5.css\">\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"static/UEditor/xiumi-ue-dialog-v5.js\"></script>\n```\n\n2. 下载文件 `http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.html` 和 `http://hgs.xiumi.us/uedit/dialogs/internal.js` 放在你的UEditor目录下。\n\n3. 修改`UEditor`的配置（ueditor.config.js），第414行左右：将section:[] 改为section:['class', 'style']，避免ueditor修改秀米的格式信息，造成排版错误。\n\n4. 在`xiumi-ue-dialog-v5.js`中把`iframeUrl`改为本地秀米H5的路径，如果你都是按照以上步骤进行那么路径将是`/static/UEditor/xiumi-ue-dialog-v5.html`，如果不是的话要按你自己的路径。\n\n\n到这里就是可以正常使用秀米并且有着双向数据绑定的ueditor啦。\n图片上传相关功能需要后台小哥哥的协助。\n其余与秀米的对接可以参考[与秀米对接](http://ent.xiumi.us/)\n还是有疑问的小盆友可以下载我上传的[demo](https://github.com/Yu-Lxy/vue-ueditor-wrap-xiumi)，希望可以帮助到你😜\n\n这是接好后的样纸：\n![秀米](xiumi/1599127298698.jpg)","source":"_posts/xiumi.md","raw":"---\ntitle: vue+vue-ueditor-wrap+秀米\ndate: 2019-09-03 17:44:15\ntags: vue\ncategories: vue\n---\n我们的项目中使用的是ueditor+秀米的富文本编辑器，github上的大神做了一个基于vue的ueditor的组件，能够实现双向数据绑定，可以不用费劲的getContent、setContent。就决定用这个组件 ——  [vue-ueditor-wrap](https://github.com/HaoChuan9421/vue-ueditor-wrap)\t。so~  vue+vue-ueditor-wrap+秀米. 开始吧 ⤵︎\n\n<!-- more -->\n\n**一：去ueditor官网下载官方源码** \n\n1. https://ueditor.baidu.com/website/download.html\n\n2. 下载完成后，放到你的Vue项目里static下并命名为UEditor。\n\n**二：安装vue-ueditor-wrap** \n\n```javascript\nnpm i vue-ueditor-wrap\n```\n**三：引入并使用** \n1. main.js\n```javascript\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\n// 引入ueditor的依赖文件\nimport '../static/UEditor/ueditor.config'\nimport '../static/UEditor/ueditor.all.min.js'\nimport '../static/UEditor/lang/zh-cn/zh-cn.js'\nimport '../static/UEditor/ueditor.parse.min.js'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '<App/>'\n})\n\n```\n2. 组件里\n```javascript\n<template>\n  <div class=\"hello\">\n  \t<!--数据绑定-->\n    <vue-ueditor-wrap v-model=\"msg\" />\n    <span>{{msg}}</span>\n  </div>\n</template>\n\n<script>\nimport VueUeditorWrap from 'vue-ueditor-wrap' // 引入vue-ueditor-wrap\nexport default {\n  name: 'HelloWorld',\n  components: {\n    VueUeditorWrap\t//注册组件\n  },\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n```\n这些完成后，你就可以看到一个初始化好的`ueditor`了，并且可以很方便的绑定想要的数据 ?\n接入**秀米**的童鞋继续向下看?\n\n**四：在ueditor基础上接入秀米**\n\n秀米提供：[秀米图文排版UEditor插件示例](http://hgs.xiumi.us/uedit/)\n\n1. 在你的index.html中引用 `http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.js` 和 `http://xiumi.us/connect/ue/xiumi-ue-v5.css` 也可以下载文件后放在UEditor目录下引入本地文件，这样方便修改。（我是下载后引入本地的）如下\n```javascript\n<link rel=\"stylesheet\" href=\"static/UEditor/xiumi-ue-v5.css\">\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"static/UEditor/xiumi-ue-dialog-v5.js\"></script>\n```\n\n2. 下载文件 `http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.html` 和 `http://hgs.xiumi.us/uedit/dialogs/internal.js` 放在你的UEditor目录下。\n\n3. 修改`UEditor`的配置（ueditor.config.js），第414行左右：将section:[] 改为section:['class', 'style']，避免ueditor修改秀米的格式信息，造成排版错误。\n\n4. 在`xiumi-ue-dialog-v5.js`中把`iframeUrl`改为本地秀米H5的路径，如果你都是按照以上步骤进行那么路径将是`/static/UEditor/xiumi-ue-dialog-v5.html`，如果不是的话要按你自己的路径。\n\n\n到这里就是可以正常使用秀米并且有着双向数据绑定的ueditor啦。\n图片上传相关功能需要后台小哥哥的协助。\n其余与秀米的对接可以参考[与秀米对接](http://ent.xiumi.us/)\n还是有疑问的小盆友可以下载我上传的[demo](https://github.com/Yu-Lxy/vue-ueditor-wrap-xiumi)，希望可以帮助到你😜\n\n这是接好后的样纸：\n![秀米](xiumi/1599127298698.jpg)","slug":"xiumi","published":1,"updated":"2020-09-04T01:53:42.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945coo000d773zxe1fek0j","content":"<p>我们的项目中使用的是ueditor+秀米的富文本编辑器，github上的大神做了一个基于vue的ueditor的组件，能够实现双向数据绑定，可以不用费劲的getContent、setContent。就决定用这个组件 ——  <a href=\"https://github.com/HaoChuan9421/vue-ueditor-wrap\" target=\"_blank\" rel=\"noopener\">vue-ueditor-wrap</a>    。so~  vue+vue-ueditor-wrap+秀米. 开始吧 ⤵︎</p>\n<a id=\"more\"></a>\n<p><strong>一：去ueditor官网下载官方源码</strong> </p>\n<ol>\n<li><p><a href=\"https://ueditor.baidu.com/website/download.html\" target=\"_blank\" rel=\"noopener\">https://ueditor.baidu.com/website/download.html</a></p>\n</li>\n<li><p>下载完成后，放到你的Vue项目里static下并命名为UEditor。</p>\n</li>\n</ol>\n<p><strong>二：安装vue-ueditor-wrap</strong> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue-ueditor-wrap</span><br></pre></td></tr></table></figure>\n<p><strong>三：引入并使用</strong> </p>\n<ol>\n<li><p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"comment\">// 引入ueditor的依赖文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/ueditor.config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/ueditor.all.min.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/lang/zh-cn/zh-cn.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/ueditor.parse.min.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件里</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"hello\"</span>&gt;</span><br><span class=\"line\">  \t&lt;!--数据绑定--&gt;</span><br><span class=\"line\">    &lt;vue-ueditor-wrap v-model=<span class=\"string\">\"msg\"</span> /&gt;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import VueUeditorWrap from 'vue-ueditor-wrap' /</span><span class=\"regexp\">/ 引入vue-ueditor-wrap</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: 'HelloWorld',</span></span><br><span class=\"line\"><span class=\"regexp\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    VueUeditorWrap\t/</span><span class=\"regexp\">/注册组件</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      msg: 'Welcome to Your Vue.js App'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这些完成后，你就可以看到一个初始化好的<code>ueditor</code>了，并且可以很方便的绑定想要的数据 ?<br>接入<strong>秀米</strong>的童鞋继续向下看?</p>\n<p><strong>四：在ueditor基础上接入秀米</strong></p>\n<p>秀米提供：<a href=\"http://hgs.xiumi.us/uedit/\" target=\"_blank\" rel=\"noopener\">秀米图文排版UEditor插件示例</a></p>\n<ol>\n<li><p>在你的index.html中引用 <code>http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.js</code> 和 <code>http://xiumi.us/connect/ue/xiumi-ue-v5.css</code> 也可以下载文件后放在UEditor目录下引入本地文件，这样方便修改。（我是下载后引入本地的）如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"static/UEditor/xiumi-ue-v5.css\"</span>&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> charset=<span class=\"string\">\"utf-8\"</span> src=<span class=\"string\">\"static/UEditor/xiumi-ue-dialog-v5.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件 <code>http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.html</code> 和 <code>http://hgs.xiumi.us/uedit/dialogs/internal.js</code> 放在你的UEditor目录下。</p>\n</li>\n<li><p>修改<code>UEditor</code>的配置（ueditor.config.js），第414行左右：将section:[] 改为section:[‘class’, ‘style’]，避免ueditor修改秀米的格式信息，造成排版错误。</p>\n</li>\n<li><p>在<code>xiumi-ue-dialog-v5.js</code>中把<code>iframeUrl</code>改为本地秀米H5的路径，如果你都是按照以上步骤进行那么路径将是<code>/static/UEditor/xiumi-ue-dialog-v5.html</code>，如果不是的话要按你自己的路径。</p>\n</li>\n</ol>\n<p>到这里就是可以正常使用秀米并且有着双向数据绑定的ueditor啦。<br>图片上传相关功能需要后台小哥哥的协助。<br>其余与秀米的对接可以参考<a href=\"http://ent.xiumi.us/\" target=\"_blank\" rel=\"noopener\">与秀米对接</a><br>还是有疑问的小盆友可以下载我上传的<a href=\"https://github.com/Yu-Lxy/vue-ueditor-wrap-xiumi\" target=\"_blank\" rel=\"noopener\">demo</a>，希望可以帮助到你😜</p>\n<p>这是接好后的样纸：<br><img src=\"/2019/09/03/xiumi/1599127298698.jpg\" alt=\"秀米\"></p>\n","site":{"data":{}},"excerpt":"<p>我们的项目中使用的是ueditor+秀米的富文本编辑器，github上的大神做了一个基于vue的ueditor的组件，能够实现双向数据绑定，可以不用费劲的getContent、setContent。就决定用这个组件 ——  <a href=\"https://github.com/HaoChuan9421/vue-ueditor-wrap\" target=\"_blank\" rel=\"noopener\">vue-ueditor-wrap</a>    。so~  vue+vue-ueditor-wrap+秀米. 开始吧 ⤵︎</p>","more":"<p><strong>一：去ueditor官网下载官方源码</strong> </p>\n<ol>\n<li><p><a href=\"https://ueditor.baidu.com/website/download.html\" target=\"_blank\" rel=\"noopener\">https://ueditor.baidu.com/website/download.html</a></p>\n</li>\n<li><p>下载完成后，放到你的Vue项目里static下并命名为UEditor。</p>\n</li>\n</ol>\n<p><strong>二：安装vue-ueditor-wrap</strong> </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vue-ueditor-wrap</span><br></pre></td></tr></table></figure>\n<p><strong>三：引入并使用</strong> </p>\n<ol>\n<li><p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Vue build version to load with the `import` command</span></span><br><span class=\"line\"><span class=\"comment\">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"comment\">// 引入ueditor的依赖文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/ueditor.config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/ueditor.all.min.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/lang/zh-cn/zh-cn.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../static/UEditor/ueditor.parse.min.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件里</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"hello\"</span>&gt;</span><br><span class=\"line\">  \t&lt;!--数据绑定--&gt;</span><br><span class=\"line\">    &lt;vue-ueditor-wrap v-model=<span class=\"string\">\"msg\"</span> /&gt;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import VueUeditorWrap from 'vue-ueditor-wrap' /</span><span class=\"regexp\">/ 引入vue-ueditor-wrap</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: 'HelloWorld',</span></span><br><span class=\"line\"><span class=\"regexp\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    VueUeditorWrap\t/</span><span class=\"regexp\">/注册组件</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      msg: 'Welcome to Your Vue.js App'</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这些完成后，你就可以看到一个初始化好的<code>ueditor</code>了，并且可以很方便的绑定想要的数据 ?<br>接入<strong>秀米</strong>的童鞋继续向下看?</p>\n<p><strong>四：在ueditor基础上接入秀米</strong></p>\n<p>秀米提供：<a href=\"http://hgs.xiumi.us/uedit/\" target=\"_blank\" rel=\"noopener\">秀米图文排版UEditor插件示例</a></p>\n<ol>\n<li><p>在你的index.html中引用 <code>http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.js</code> 和 <code>http://xiumi.us/connect/ue/xiumi-ue-v5.css</code> 也可以下载文件后放在UEditor目录下引入本地文件，这样方便修改。（我是下载后引入本地的）如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"static/UEditor/xiumi-ue-v5.css\"</span>&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> charset=<span class=\"string\">\"utf-8\"</span> src=<span class=\"string\">\"static/UEditor/xiumi-ue-dialog-v5.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件 <code>http://xiumi.us/connect/ue/xiumi-ue-dialog-v5.html</code> 和 <code>http://hgs.xiumi.us/uedit/dialogs/internal.js</code> 放在你的UEditor目录下。</p>\n</li>\n<li><p>修改<code>UEditor</code>的配置（ueditor.config.js），第414行左右：将section:[] 改为section:[‘class’, ‘style’]，避免ueditor修改秀米的格式信息，造成排版错误。</p>\n</li>\n<li><p>在<code>xiumi-ue-dialog-v5.js</code>中把<code>iframeUrl</code>改为本地秀米H5的路径，如果你都是按照以上步骤进行那么路径将是<code>/static/UEditor/xiumi-ue-dialog-v5.html</code>，如果不是的话要按你自己的路径。</p>\n</li>\n</ol>\n<p>到这里就是可以正常使用秀米并且有着双向数据绑定的ueditor啦。<br>图片上传相关功能需要后台小哥哥的协助。<br>其余与秀米的对接可以参考<a href=\"http://ent.xiumi.us/\" target=\"_blank\" rel=\"noopener\">与秀米对接</a><br>还是有疑问的小盆友可以下载我上传的<a href=\"https://github.com/Yu-Lxy/vue-ueditor-wrap-xiumi\" target=\"_blank\" rel=\"noopener\">demo</a>，希望可以帮助到你😜</p>\n<p>这是接好后的样纸：<br><img src=\"/2019/09/03/xiumi/1599127298698.jpg\" alt=\"秀米\"></p>"},{"title":"try catch能捕获到哪些JS异常","date":"2020-08-04T01:50:45.000Z","_content":"\n>写代码时经常会用到 `try catch`，防止一些JS报错，导致页面挂掉。那么到底哪些JS异常能被捕获到呢？\n\n<!-- more -->\n\n>**简单解释就是：在报错的时候，线程执行已经进入 `try catch` 代码块，并且处在 `try catch` 里，才能被捕捉到。**（之前，之后都无法捕捉异常）\n\n- ###### 下面三个小栗子，解释一下 `try catch` 的前中后\n\n🌰 例子1：\n```\ntry{\n    a(\n} catch (e) {\n    console.log('error', e)\n}\n// output\nUncaught SyntaxError: Unexpected token }\n```\n*例子1* 语法异常（SyntaxError），因为语法异常是在语法阶段就报错了，所以线程还没进入 `try catch` 代码块，就捕获不到异常。\n\n🌰 例子2：\n```\nfunction d () {a.b}\ntry {\n   d()\n} catch (e) {\n   console.log('error', e)\n}\n// output\nerror ReferenceError: a is not defined\n```\n*例子2* 报错的时机，是代码执行进入了 `try catch` ，执行 d 方法的时候，线程执行处在 `try` 里面，所以能捕捉到。\n\n🌰 例子3：\n```\ntry {\n   function d () {a.b}\n} catch (e) {\n   console.log('error', e)\n}\nd()\n// output\nerror ReferenceError: a is not defined\n```\n*例子3* 方法定义在 `try catch` 代码块里，但是执行方法在 `try catch` 外，执行 d 方法的时候报错，此时 try catch 已经执行完成，所以无法捕捉异常。\n\n三个例子之后应该能理解怎样的JS异常可以被捕获了，但是在我们用 `promise` 的时候发现相对于外部的 `try catch` ，Promise 没有异常！\n\n### promise & try catch\n🌰 例子4：\n```\ntry{\n  new Promise((resolve, reject) => {\n    a.b\n  }).then(v => {\n    console(v)\n  })\n} catch (e) {\n  console.log('error', e)\n}\n// output\nUncaught (in promise) ReferenceError: a is not defined\n```\n*例子4* 线程在执行a.b的时候，适时向属于同步执行，`try catch` 并未执行完成，为什么捕获不到异常呢？\n\n事实上，**Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获**，不管是同步还是异步。\n\n核心原因是因为 `Promise` 在执行回调中都用 `try catch` 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常，所以异常都不会被外层的 `try catch` 捕捉。\n\n🌰 例子5：\n```\nfunction a(){\n  return new Promise((resolve, reject) =>{\n    setTimeout(() => {\n      reject('报错了')\n    })\n  })\n}\n\nasync function foo () {\n  try{\n    await a()\n  } catch (e) {\n    console.log('error', e)\n  }\n}\nfoo()\n// output\nerror 报错了\n```\n为什么 *例子5* 的异常能被 `catch` 捕获到呢，因为报错的时候，线程执行已经进入了 `try catch` 代码块，并且异常由 reject 抛出，自然可以捕获到。\n\n ###总结：\n> **1. 在报错的时候，线程执行已经进入 `try catch` 代码块，并且处在 `try catch` 里，才能被捕捉到。**\n\n> **2. 不要用 `try catch` 包裹 `Promise`，我们只需要给 `Promise` 增加 Promise#catch 就 OK 了**","source":"_posts/tryCatch.md","raw":"---\ntitle: try catch能捕获到哪些JS异常\ndate: 2020-08-04 09:50:45\ntags: js\ncategories: js\n---\n\n>写代码时经常会用到 `try catch`，防止一些JS报错，导致页面挂掉。那么到底哪些JS异常能被捕获到呢？\n\n<!-- more -->\n\n>**简单解释就是：在报错的时候，线程执行已经进入 `try catch` 代码块，并且处在 `try catch` 里，才能被捕捉到。**（之前，之后都无法捕捉异常）\n\n- ###### 下面三个小栗子，解释一下 `try catch` 的前中后\n\n🌰 例子1：\n```\ntry{\n    a(\n} catch (e) {\n    console.log('error', e)\n}\n// output\nUncaught SyntaxError: Unexpected token }\n```\n*例子1* 语法异常（SyntaxError），因为语法异常是在语法阶段就报错了，所以线程还没进入 `try catch` 代码块，就捕获不到异常。\n\n🌰 例子2：\n```\nfunction d () {a.b}\ntry {\n   d()\n} catch (e) {\n   console.log('error', e)\n}\n// output\nerror ReferenceError: a is not defined\n```\n*例子2* 报错的时机，是代码执行进入了 `try catch` ，执行 d 方法的时候，线程执行处在 `try` 里面，所以能捕捉到。\n\n🌰 例子3：\n```\ntry {\n   function d () {a.b}\n} catch (e) {\n   console.log('error', e)\n}\nd()\n// output\nerror ReferenceError: a is not defined\n```\n*例子3* 方法定义在 `try catch` 代码块里，但是执行方法在 `try catch` 外，执行 d 方法的时候报错，此时 try catch 已经执行完成，所以无法捕捉异常。\n\n三个例子之后应该能理解怎样的JS异常可以被捕获了，但是在我们用 `promise` 的时候发现相对于外部的 `try catch` ，Promise 没有异常！\n\n### promise & try catch\n🌰 例子4：\n```\ntry{\n  new Promise((resolve, reject) => {\n    a.b\n  }).then(v => {\n    console(v)\n  })\n} catch (e) {\n  console.log('error', e)\n}\n// output\nUncaught (in promise) ReferenceError: a is not defined\n```\n*例子4* 线程在执行a.b的时候，适时向属于同步执行，`try catch` 并未执行完成，为什么捕获不到异常呢？\n\n事实上，**Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获**，不管是同步还是异步。\n\n核心原因是因为 `Promise` 在执行回调中都用 `try catch` 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常，所以异常都不会被外层的 `try catch` 捕捉。\n\n🌰 例子5：\n```\nfunction a(){\n  return new Promise((resolve, reject) =>{\n    setTimeout(() => {\n      reject('报错了')\n    })\n  })\n}\n\nasync function foo () {\n  try{\n    await a()\n  } catch (e) {\n    console.log('error', e)\n  }\n}\nfoo()\n// output\nerror 报错了\n```\n为什么 *例子5* 的异常能被 `catch` 捕获到呢，因为报错的时候，线程执行已经进入了 `try catch` 代码块，并且异常由 reject 抛出，自然可以捕获到。\n\n ###总结：\n> **1. 在报错的时候，线程执行已经进入 `try catch` 代码块，并且处在 `try catch` 里，才能被捕捉到。**\n\n> **2. 不要用 `try catch` 包裹 `Promise`，我们只需要给 `Promise` 增加 Promise#catch 就 OK 了**","slug":"tryCatch","published":1,"updated":"2020-09-04T02:00:54.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945coq000e773zy28el1gd","content":"<blockquote>\n<p>写代码时经常会用到 <code>try catch</code>，防止一些JS报错，导致页面挂掉。那么到底哪些JS异常能被捕获到呢？</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>简单解释就是：在报错的时候，线程执行已经进入 <code>try catch</code> 代码块，并且处在 <code>try catch</code> 里，才能被捕捉到。</strong>（之前，之后都无法捕捉异常）</p>\n</blockquote>\n<ul>\n<li><h6 id=\"下面三个小栗子，解释一下-try-catch-的前中后\"><a href=\"#下面三个小栗子，解释一下-try-catch-的前中后\" class=\"headerlink\" title=\"下面三个小栗子，解释一下 try catch 的前中后\"></a>下面三个小栗子，解释一下 <code>try catch</code> 的前中后</h6></li>\n</ul>\n<p>🌰 例子1：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    a(</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">Uncaught <span class=\"built_in\">SyntaxError</span>: Unexpected token &#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>例子1</em> 语法异常（SyntaxError），因为语法异常是在语法阶段就报错了，所以线程还没进入 <code>try catch</code> 代码块，就捕获不到异常。</p>\n<p>🌰 例子2：<br><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function d () &#123;a.b&#125;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">   d()</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">   console.log('error', e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// output</span><br><span class=\"line\"><span class=\"keyword\">error </span>ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p><em>例子2</em> 报错的时机，是代码执行进入了 <code>try catch</code> ，执行 d 方法的时候，线程执行处在 <code>try</code> 里面，所以能捕捉到。</p>\n<p>🌰 例子3：<br><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">   function d () &#123;a.b&#125;</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">   console.log('error', e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d()</span><br><span class=\"line\">// output</span><br><span class=\"line\"><span class=\"keyword\">error </span>ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p><em>例子3</em> 方法定义在 <code>try catch</code> 代码块里，但是执行方法在 <code>try catch</code> 外，执行 d 方法的时候报错，此时 try catch 已经执行完成，所以无法捕捉异常。</p>\n<p>三个例子之后应该能理解怎样的JS异常可以被捕获了，但是在我们用 <code>promise</code> 的时候发现相对于外部的 <code>try catch</code> ，Promise 没有异常！</p>\n<h3 id=\"promise-amp-try-catch\"><a href=\"#promise-amp-try-catch\" class=\"headerlink\" title=\"promise &amp; try catch\"></a>promise &amp; try catch</h3><p>🌰 例子4：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    a.b</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>(v)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">Uncaught (<span class=\"keyword\">in</span> promise) <span class=\"built_in\">ReferenceError</span>: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p><em>例子4</em> 线程在执行a.b的时候，适时向属于同步执行，<code>try catch</code> 并未执行完成，为什么捕获不到异常呢？</p>\n<p>事实上，<strong>Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获</strong>，不管是同步还是异步。</p>\n<p>核心原因是因为 <code>Promise</code> 在执行回调中都用 <code>try catch</code> 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常，所以异常都不会被外层的 <code>try catch</code> 捕捉。</p>\n<p>🌰 例子5：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      reject(<span class=\"string\">'报错了'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> a()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">error 报错了</span><br></pre></td></tr></table></figure></p>\n<p>为什么 <em>例子5</em> 的异常能被 <code>catch</code> 捕获到呢，因为报错的时候，线程执行已经进入了 <code>try catch</code> 代码块，并且异常由 reject 抛出，自然可以捕获到。</p>\n<p> ###总结：</p>\n<blockquote>\n<p><strong>1. 在报错的时候，线程执行已经进入 <code>try catch</code> 代码块，并且处在 <code>try catch</code> 里，才能被捕捉到。</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>2. 不要用 <code>try catch</code> 包裹 <code>Promise</code>，我们只需要给 <code>Promise</code> 增加 Promise#catch 就 OK 了</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>写代码时经常会用到 <code>try catch</code>，防止一些JS报错，导致页面挂掉。那么到底哪些JS异常能被捕获到呢？</p>\n</blockquote>","more":"<blockquote>\n<p><strong>简单解释就是：在报错的时候，线程执行已经进入 <code>try catch</code> 代码块，并且处在 <code>try catch</code> 里，才能被捕捉到。</strong>（之前，之后都无法捕捉异常）</p>\n</blockquote>\n<ul>\n<li><h6 id=\"下面三个小栗子，解释一下-try-catch-的前中后\"><a href=\"#下面三个小栗子，解释一下-try-catch-的前中后\" class=\"headerlink\" title=\"下面三个小栗子，解释一下 try catch 的前中后\"></a>下面三个小栗子，解释一下 <code>try catch</code> 的前中后</h6></li>\n</ul>\n<p>🌰 例子1：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    a(</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">Uncaught <span class=\"built_in\">SyntaxError</span>: Unexpected token &#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>例子1</em> 语法异常（SyntaxError），因为语法异常是在语法阶段就报错了，所以线程还没进入 <code>try catch</code> 代码块，就捕获不到异常。</p>\n<p>🌰 例子2：<br><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function d () &#123;a.b&#125;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">   d()</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">   console.log('error', e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// output</span><br><span class=\"line\"><span class=\"keyword\">error </span>ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p><em>例子2</em> 报错的时机，是代码执行进入了 <code>try catch</code> ，执行 d 方法的时候，线程执行处在 <code>try</code> 里面，所以能捕捉到。</p>\n<p>🌰 例子3：<br><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">   function d () &#123;a.b&#125;</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">   console.log('error', e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">d()</span><br><span class=\"line\">// output</span><br><span class=\"line\"><span class=\"keyword\">error </span>ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p><em>例子3</em> 方法定义在 <code>try catch</code> 代码块里，但是执行方法在 <code>try catch</code> 外，执行 d 方法的时候报错，此时 try catch 已经执行完成，所以无法捕捉异常。</p>\n<p>三个例子之后应该能理解怎样的JS异常可以被捕获了，但是在我们用 <code>promise</code> 的时候发现相对于外部的 <code>try catch</code> ，Promise 没有异常！</p>\n<h3 id=\"promise-amp-try-catch\"><a href=\"#promise-amp-try-catch\" class=\"headerlink\" title=\"promise &amp; try catch\"></a>promise &amp; try catch</h3><p>🌰 例子4：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    a.b</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>(v)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">Uncaught (<span class=\"keyword\">in</span> promise) <span class=\"built_in\">ReferenceError</span>: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p><em>例子4</em> 线程在执行a.b的时候，适时向属于同步执行，<code>try catch</code> 并未执行完成，为什么捕获不到异常呢？</p>\n<p>事实上，<strong>Promise 的异常都是由 reject 和 Promise.prototype.catch 来捕获</strong>，不管是同步还是异步。</p>\n<p>核心原因是因为 <code>Promise</code> 在执行回调中都用 <code>try catch</code> 包裹起来了，其中所有的异常都被内部捕获到了，并未往上抛异常，所以异常都不会被外层的 <code>try catch</code> 捕捉。</p>\n<p>🌰 例子5：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      reject(<span class=\"string\">'报错了'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> a()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">error 报错了</span><br></pre></td></tr></table></figure></p>\n<p>为什么 <em>例子5</em> 的异常能被 <code>catch</code> 捕获到呢，因为报错的时候，线程执行已经进入了 <code>try catch</code> 代码块，并且异常由 reject 抛出，自然可以捕获到。</p>\n<p> ###总结：</p>\n<blockquote>\n<p><strong>1. 在报错的时候，线程执行已经进入 <code>try catch</code> 代码块，并且处在 <code>try catch</code> 里，才能被捕捉到。</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>2. 不要用 <code>try catch</code> 包裹 <code>Promise</code>，我们只需要给 <code>Promise</code> 增加 Promise#catch 就 OK 了</strong></p>\n</blockquote>"},{"title":"第一次使用mongoDB的记录","date":"2020-09-04T07:30:15.000Z","_content":"## 简介\n\n一个 `vue+express+mongodb` 的小demo，实现了列表的增删查，以及简单的分页功能。\n[Github项目地址](https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo)\n\n<!-- more -->\n\n## mongo命令行操作\n```\n// 进入mongo命令行\nmongo\n\n// 查询所有数据库\nshow dbs\n\n// 切换/创建数据库,当创建一个集合(table)的时候会自动创建当前数据库\nuse test\n\n// 查询\ndb.表名.find()\n\n// 条件查询\ndb.表名.find({price: 5})\n\n// 插入(insertOne/insertMany/save)\ndb.表名.insertOne({name: '苹果', price: 5})\n\n// 更新\ndb.表名.update({ name: '苹果' }, { $set: { price: 6 } })\n\n// 删除(deleteOne/deleteMany/remove)\ndb.表名.updateOne({ name: '苹果' })\n```\n\n## mongoDB\n> mongoDB的基本操作\n\n1. 连接mongoDB\n```\n// 客户端\nconst MongoClient = require('mongodb').MongoClient\n\n// 连接URL\nconst url = 'mongodb://localhost:27017'\n\n// 数据库名\nconst dbName = 'test'\n\n(async function() {\n  // 0.创建客户端\n  const client = new MongoClient(url, { useNewUrlParser: true })\n  try {\n    // 1.连接数据库(异步) \n    await client.connect() \n    console.log('连接成功')\n  } catch (error) {\n    console.error(error)\n  }\n  client.close()\n})()\n```\n2. 获取数据库\n```\nconst db = client.db(dbName)\n```\n3. 获取表\n```\nconst col = db.collection(colName)\n```\n\n基本操作了解后运行一下[项目](https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo)里的代码~ 👇\n\n## 运行\n首先安装以下\n```\nnpm i express path events mongodb nodemon\n```\n\nconf.js里设置自己的mongodb配置\n\n数据库没数据的话先执行以下添加数据：\n```\ncd models\nnodemon testData.js\n```\n\n添加好之后ctrl+c, 再执行以下\n```\ncd ..\nnodemon index.js\n```\n打开localhost:3000能看到如下样式\n\n![image.png](https://i.loli.net/2020/08/27/ALNjeIKPOY9QTHF.png)\n\n\n## EventEmitter\n[项目](https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo)中有一个testData.js，执行后可以插入测试数据。其中有一个 `mongodb.once()` 方法，实际上在db.js里的 `MongDB类` 中是执行了 `EventEmitter的once` 方法。events模块只提供了一个对象： `events.EventEmitter`， 其核心就是事件触发与事件监听器功能的封装，可以通过require('events')来访问该模块。\n```\n// 例子\nconst EventEmitter = require('events').EventEmitter \nconst event = new EventEmitter() \nevent.on('some_event', num =>  { \n  console.log('some_event 事件触发:' + num) \n}) \nlet num = 0\nsetInterval(() =>  { \n  event.emit('some_event' , num ++ ) \n}, 1000) \n```\n`event.once()` 是只执行一次的监听，所以执行 `nodemon testData.js` 后，只触发一次连库的操作并执行回调。\n\n## 注意的点\n- 后端get请求的参数从`query`里拿, post请求的参数从`body`里拿。\n- `const page = + req.query.page` +号为了转Number类型。\n- `.skip(n).limit(m)` 意为跳过n个取m个。\n- mongoDB插入数据时自动生成的 `_id` 是 `ObjectId` 对象类型，所以当参数作为查询条件时需要引入 `mongodb的ObjectID`，传参时调用。\n\n## End\n前端小白第一次使用mongoDB的记录📝，简单小例子容易入门和理解，轻喷~ 😆","source":"_posts/mongo.md","raw":"---\ntitle: 第一次使用mongoDB的记录\ndate: 2020-09-04 15:30:15\ntags: mongoDB\ncategories: mongoDB\n---\n## 简介\n\n一个 `vue+express+mongodb` 的小demo，实现了列表的增删查，以及简单的分页功能。\n[Github项目地址](https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo)\n\n<!-- more -->\n\n## mongo命令行操作\n```\n// 进入mongo命令行\nmongo\n\n// 查询所有数据库\nshow dbs\n\n// 切换/创建数据库,当创建一个集合(table)的时候会自动创建当前数据库\nuse test\n\n// 查询\ndb.表名.find()\n\n// 条件查询\ndb.表名.find({price: 5})\n\n// 插入(insertOne/insertMany/save)\ndb.表名.insertOne({name: '苹果', price: 5})\n\n// 更新\ndb.表名.update({ name: '苹果' }, { $set: { price: 6 } })\n\n// 删除(deleteOne/deleteMany/remove)\ndb.表名.updateOne({ name: '苹果' })\n```\n\n## mongoDB\n> mongoDB的基本操作\n\n1. 连接mongoDB\n```\n// 客户端\nconst MongoClient = require('mongodb').MongoClient\n\n// 连接URL\nconst url = 'mongodb://localhost:27017'\n\n// 数据库名\nconst dbName = 'test'\n\n(async function() {\n  // 0.创建客户端\n  const client = new MongoClient(url, { useNewUrlParser: true })\n  try {\n    // 1.连接数据库(异步) \n    await client.connect() \n    console.log('连接成功')\n  } catch (error) {\n    console.error(error)\n  }\n  client.close()\n})()\n```\n2. 获取数据库\n```\nconst db = client.db(dbName)\n```\n3. 获取表\n```\nconst col = db.collection(colName)\n```\n\n基本操作了解后运行一下[项目](https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo)里的代码~ 👇\n\n## 运行\n首先安装以下\n```\nnpm i express path events mongodb nodemon\n```\n\nconf.js里设置自己的mongodb配置\n\n数据库没数据的话先执行以下添加数据：\n```\ncd models\nnodemon testData.js\n```\n\n添加好之后ctrl+c, 再执行以下\n```\ncd ..\nnodemon index.js\n```\n打开localhost:3000能看到如下样式\n\n![image.png](https://i.loli.net/2020/08/27/ALNjeIKPOY9QTHF.png)\n\n\n## EventEmitter\n[项目](https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo)中有一个testData.js，执行后可以插入测试数据。其中有一个 `mongodb.once()` 方法，实际上在db.js里的 `MongDB类` 中是执行了 `EventEmitter的once` 方法。events模块只提供了一个对象： `events.EventEmitter`， 其核心就是事件触发与事件监听器功能的封装，可以通过require('events')来访问该模块。\n```\n// 例子\nconst EventEmitter = require('events').EventEmitter \nconst event = new EventEmitter() \nevent.on('some_event', num =>  { \n  console.log('some_event 事件触发:' + num) \n}) \nlet num = 0\nsetInterval(() =>  { \n  event.emit('some_event' , num ++ ) \n}, 1000) \n```\n`event.once()` 是只执行一次的监听，所以执行 `nodemon testData.js` 后，只触发一次连库的操作并执行回调。\n\n## 注意的点\n- 后端get请求的参数从`query`里拿, post请求的参数从`body`里拿。\n- `const page = + req.query.page` +号为了转Number类型。\n- `.skip(n).limit(m)` 意为跳过n个取m个。\n- mongoDB插入数据时自动生成的 `_id` 是 `ObjectId` 对象类型，所以当参数作为查询条件时需要引入 `mongodb的ObjectID`，传参时调用。\n\n## End\n前端小白第一次使用mongoDB的记录📝，简单小例子容易入门和理解，轻喷~ 😆","slug":"mongo","published":1,"updated":"2020-09-04T10:00:05.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945cos000j773zusphqk7m","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>一个 <code>vue+express+mongodb</code> 的小demo，实现了列表的增删查，以及简单的分页功能。<br><a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo\" target=\"_blank\" rel=\"noopener\">Github项目地址</a></p>\n<a id=\"more\"></a>\n<h2 id=\"mongo命令行操作\"><a href=\"#mongo命令行操作\" class=\"headerlink\" title=\"mongo命令行操作\"></a>mongo命令行操作</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入mongo命令行</span></span><br><span class=\"line\"><span class=\"selector-tag\">mongo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有数据库</span></span><br><span class=\"line\"><span class=\"selector-tag\">show</span> <span class=\"selector-tag\">dbs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 切换/创建数据库,当创建一个集合(table)的时候会自动创建当前数据库</span></span><br><span class=\"line\"><span class=\"selector-tag\">use</span> <span class=\"selector-tag\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.find</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 条件查询</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">price</span>: <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入(insertOne/insertMany/save)</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.insertOne</span>(&#123;<span class=\"attribute\">name</span>: <span class=\"string\">'苹果'</span>, <span class=\"attribute\">price</span>: <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.update</span>(&#123; <span class=\"attribute\">name</span>: <span class=\"string\">'苹果'</span> &#125;, &#123; $<span class=\"attribute\">set</span>: &#123; <span class=\"attribute\">price</span>: <span class=\"number\">6</span> &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除(deleteOne/deleteMany/remove)</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.updateOne</span>(&#123; <span class=\"attribute\">name</span>: <span class=\"string\">'苹果'</span> &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongoDB\"><a href=\"#mongoDB\" class=\"headerlink\" title=\"mongoDB\"></a>mongoDB</h2><blockquote>\n<p>mongoDB的基本操作</p>\n</blockquote>\n<ol>\n<li><p>连接mongoDB</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 客户端</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接URL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">url</span> = <span class=\"string\">'mongodb://localhost:27017'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbName = <span class=\"string\">'test'</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 0.创建客户端</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> MongoClient(<span class=\"built_in\">url</span>, &#123; <span class=\"attribute\">useNewUrlParser</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"title\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.连接数据库(异步) </span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> client.connect() </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功'</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  client.close()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">db</span> = client.<span class=\"keyword\">db</span>(dbName)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取表</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> col = <span class=\"keyword\">db</span>.collection(colName)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>基本操作了解后运行一下<a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo\" target=\"_blank\" rel=\"noopener\">项目</a>里的代码~ 👇</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>首先安装以下<br><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">i</span> express path <span class=\"keyword\">events</span> mongodb nodemon</span><br></pre></td></tr></table></figure></p>\n<p>conf.js里设置自己的mongodb配置</p>\n<p>数据库没数据的话先执行以下添加数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> models</span><br><span class=\"line\">nodemon testData.js</span><br></pre></td></tr></table></figure></p>\n<p>添加好之后ctrl+c, 再执行以下<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">cd</span></span> ..</span><br><span class=\"line\">nodemon index.js</span><br></pre></td></tr></table></figure></p>\n<p>打开localhost:3000能看到如下样式</p>\n<p><img src=\"https://i.loli.net/2020/08/27/ALNjeIKPOY9QTHF.png\" alt=\"image.png\"></p>\n<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a>EventEmitter</h2><p><a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo\" target=\"_blank\" rel=\"noopener\">项目</a>中有一个testData.js，执行后可以插入测试数据。其中有一个 <code>mongodb.once()</code> 方法，实际上在db.js里的 <code>MongDB类</code> 中是执行了 <code>EventEmitter的once</code> 方法。events模块只提供了一个对象： <code>events.EventEmitter</code>， 其核心就是事件触发与事件监听器功能的封装，可以通过require(‘events’)来访问该模块。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter </span><br><span class=\"line\"><span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> EventEmitter() </span><br><span class=\"line\">event.on(<span class=\"string\">'some_event'</span>, <span class=\"function\"><span class=\"params\">num</span> =&gt;</span>  &#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'some_event 事件触发:'</span> + num) </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">0</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>  &#123; </span><br><span class=\"line\">  event.emit(<span class=\"string\">'some_event'</span> , num ++ ) </span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>event.once()</code> 是只执行一次的监听，所以执行 <code>nodemon testData.js</code> 后，只触发一次连库的操作并执行回调。</p>\n<h2 id=\"注意的点\"><a href=\"#注意的点\" class=\"headerlink\" title=\"注意的点\"></a>注意的点</h2><ul>\n<li>后端get请求的参数从<code>query</code>里拿, post请求的参数从<code>body</code>里拿。</li>\n<li><code>const page = + req.query.page</code> +号为了转Number类型。</li>\n<li><code>.skip(n).limit(m)</code> 意为跳过n个取m个。</li>\n<li>mongoDB插入数据时自动生成的 <code>_id</code> 是 <code>ObjectId</code> 对象类型，所以当参数作为查询条件时需要引入 <code>mongodb的ObjectID</code>，传参时调用。</li>\n</ul>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>前端小白第一次使用mongoDB的记录📝，简单小例子容易入门和理解，轻喷~ 😆</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>一个 <code>vue+express+mongodb</code> 的小demo，实现了列表的增删查，以及简单的分页功能。<br><a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo\" target=\"_blank\" rel=\"noopener\">Github项目地址</a></p>","more":"<h2 id=\"mongo命令行操作\"><a href=\"#mongo命令行操作\" class=\"headerlink\" title=\"mongo命令行操作\"></a>mongo命令行操作</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入mongo命令行</span></span><br><span class=\"line\"><span class=\"selector-tag\">mongo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有数据库</span></span><br><span class=\"line\"><span class=\"selector-tag\">show</span> <span class=\"selector-tag\">dbs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 切换/创建数据库,当创建一个集合(table)的时候会自动创建当前数据库</span></span><br><span class=\"line\"><span class=\"selector-tag\">use</span> <span class=\"selector-tag\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.find</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 条件查询</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.find</span>(&#123;<span class=\"attribute\">price</span>: <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入(insertOne/insertMany/save)</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.insertOne</span>(&#123;<span class=\"attribute\">name</span>: <span class=\"string\">'苹果'</span>, <span class=\"attribute\">price</span>: <span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.update</span>(&#123; <span class=\"attribute\">name</span>: <span class=\"string\">'苹果'</span> &#125;, &#123; $<span class=\"attribute\">set</span>: &#123; <span class=\"attribute\">price</span>: <span class=\"number\">6</span> &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除(deleteOne/deleteMany/remove)</span></span><br><span class=\"line\"><span class=\"selector-tag\">db</span>.表名<span class=\"selector-class\">.updateOne</span>(&#123; <span class=\"attribute\">name</span>: <span class=\"string\">'苹果'</span> &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongoDB\"><a href=\"#mongoDB\" class=\"headerlink\" title=\"mongoDB\"></a>mongoDB</h2><blockquote>\n<p>mongoDB的基本操作</p>\n</blockquote>\n<ol>\n<li><p>连接mongoDB</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 客户端</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接URL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">url</span> = <span class=\"string\">'mongodb://localhost:27017'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dbName = <span class=\"string\">'test'</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 0.创建客户端</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> MongoClient(<span class=\"built_in\">url</span>, &#123; <span class=\"attribute\">useNewUrlParser</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  <span class=\"title\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.连接数据库(异步) </span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> client.connect() </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功'</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  client.close()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取数据库</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">db</span> = client.<span class=\"keyword\">db</span>(dbName)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取表</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> col = <span class=\"keyword\">db</span>.collection(colName)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>基本操作了解后运行一下<a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo\" target=\"_blank\" rel=\"noopener\">项目</a>里的代码~ 👇</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>首先安装以下<br><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">i</span> express path <span class=\"keyword\">events</span> mongodb nodemon</span><br></pre></td></tr></table></figure></p>\n<p>conf.js里设置自己的mongodb配置</p>\n<p>数据库没数据的话先执行以下添加数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> models</span><br><span class=\"line\">nodemon testData.js</span><br></pre></td></tr></table></figure></p>\n<p>添加好之后ctrl+c, 再执行以下<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">cd</span></span> ..</span><br><span class=\"line\">nodemon index.js</span><br></pre></td></tr></table></figure></p>\n<p>打开localhost:3000能看到如下样式</p>\n<p><img src=\"https://i.loli.net/2020/08/27/ALNjeIKPOY9QTHF.png\" alt=\"image.png\"></p>\n<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a>EventEmitter</h2><p><a href=\"https://github.com/Yu-Lxy/Daily_practice/tree/master/mongo\" target=\"_blank\" rel=\"noopener\">项目</a>中有一个testData.js，执行后可以插入测试数据。其中有一个 <code>mongodb.once()</code> 方法，实际上在db.js里的 <code>MongDB类</code> 中是执行了 <code>EventEmitter的once</code> 方法。events模块只提供了一个对象： <code>events.EventEmitter</code>， 其核心就是事件触发与事件监听器功能的封装，可以通过require(‘events’)来访问该模块。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter </span><br><span class=\"line\"><span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> EventEmitter() </span><br><span class=\"line\">event.on(<span class=\"string\">'some_event'</span>, <span class=\"function\"><span class=\"params\">num</span> =&gt;</span>  &#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'some_event 事件触发:'</span> + num) </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">0</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>  &#123; </span><br><span class=\"line\">  event.emit(<span class=\"string\">'some_event'</span> , num ++ ) </span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>event.once()</code> 是只执行一次的监听，所以执行 <code>nodemon testData.js</code> 后，只触发一次连库的操作并执行回调。</p>\n<h2 id=\"注意的点\"><a href=\"#注意的点\" class=\"headerlink\" title=\"注意的点\"></a>注意的点</h2><ul>\n<li>后端get请求的参数从<code>query</code>里拿, post请求的参数从<code>body</code>里拿。</li>\n<li><code>const page = + req.query.page</code> +号为了转Number类型。</li>\n<li><code>.skip(n).limit(m)</code> 意为跳过n个取m个。</li>\n<li>mongoDB插入数据时自动生成的 <code>_id</code> 是 <code>ObjectId</code> 对象类型，所以当参数作为查询条件时需要引入 <code>mongodb的ObjectID</code>，传参时调用。</li>\n</ul>\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>前端小白第一次使用mongoDB的记录📝，简单小例子容易入门和理解，轻喷~ 😆</p>"},{"title":"后台管理系统element-admin——二次封装Table组件","date":"2020-09-09T06:34:51.000Z","_content":"\n## Start\n项目中使用表格灰常的频繁👿，所以一个简洁的表格组件，既能让代码变得优雅还可以省去很多重复的操作。\n<!-- more -->\n\n## element封装调用\nelement-ui已经为我们封装好了一层，这是element-ui的写法：\n``` js\n<template>\n  <el-table\n    :data=\"tableData\"\n    style=\"width: 500px\">\n    <el-table-column prop=\"name\" label=\"姓名\" width=\"180\"></el-table-column>\n    <el-table-column label=\"日期\" width=\"120\">\n      <template slot-scope=\"scope\">{{ '加个前缀😝' + scope.row.date }}</template>\n    </el-table-column>\n    <el-table-column fixed=\"right\" label=\"操作\" width=\"120\">\n      <template slot-scope=\"scope\">\n        <el-button @click.native.prevent=\"deleteRow(scope.$index, tableData)\" type=\"text\" size=\"small\">\n          移除\n        </el-button>\n      </template>\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        },{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }]\n      }\n    },\n    methods: {\n      deleteRow(index, rows) {\n        rows.splice(index, 1)\n      }\n    }\n  }\n</script>\n```\n![element-table](sTable/table1.png)\n\n虽然已经封装的很好了，但感觉还是不够简洁，并且还想将分页功能、loading功能、拖动功能都通过配置参数的方式来选择是否调用，所以进行了二次封装，看一下封装过后的调用代码：\n\n## 二次封装后调用\n\n``` js\n<template>\n  <s-table ref=\"sTable\" :data=\"loadData\" :columns=\"columns\">\n    <div slot=\"action\" slot-scope=\"{row}\">\n      <el-button type=\"primary\" @click=\"deleteRow(row)\">移除</el-button>\n    </div>\n  </s-table>\n<template>\n\n<script>\nimport STable from '@/components/table/index'\nexport default {\n  components: {\n    STable\n  },\n  data () {\n    return {\n      columns: [\n        {name: '姓名', desc: 'name', width: '100'},\n        {name: '日期', desc: 'date', width: '220', filter: true, filterFun: (row) => { return `加个前缀😝 ${row.date}` }},\n        {name: '操作', desc: 'action', width: '320', slot: true, fixed: 'right'}\n      ],\n    }\n  },\n  methods: {\n    loadData: param => {\n      return getData()\n        .then(res => {\n          return res\n        })\n    }\n  }\n}\n</script>\n```\n![s-table](sTable/table2.png)\n\n引入组件之后，table的数据由组件内部主动调用并返回，表格的每一列不再是 `el-table-column` 标签，而是由 `columns` 数组传递每一列信息，还包括了 `loading、pagination` 组件的逻辑，不用每次都处理同样的逻辑了。其中还包含了拖拽排序、选中操作等常用的功能。\n\n## 开始写\n下面看一下二次封装table组件的思路吧~\n\n### JSX写法\n`JSX` 就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 `<` ，JSX就当HTML解析，遇到 `{` 就当JavaScript解析。\n我为什么用jsx呢？一方面是之前的一版template写法写的实在是看着很\"chou\"，另一方面想学习jsx语法和render函数[官方文档看这里](https://cn.vuejs.org/v2/guide/render-function.html)。\n\n### 主思路\n> 从结构上来看，主要分为两部分：`table` 和 `pagination` ，而 `table` 中又有 `column` 。\n\n> 其次就是数据的加载和过滤，默认主动调用数据加载，统一处理好数据结构（`table` 所需的 `list` ，分页组件所需的数据等）后，按需返回。\n\n> 拖动功能的初始化和处理。\n\n> table数据的更新机制。\n\n-----------\n\n所以主结构是这样的：\n```js\nrender () {\n  return (\n    <div>\n      { this.renderTable() }\n      { this.renderPage() }\n    </div>\n  )\n}\n```\n因为分页组件根据外部props属性决定使用或者不使用，并且有一些自定义样式，所以改成这样：\n```js\nrender () {\n  return (\n    <div>\n      { this.renderTable() }\n      <div style={this.pageClass}>{ this.showPagination ? this.renderPage() : '' }</div>\n    </div>\n  )\n}\n```\n### renderTable\n下面看一下 `renderTable` 中是怎么写的：\n```js\n/**\n  * renderTable\n  */\nrenderTable () {\n  const props = {\n    border: true, // table的边框\n    size: this.tableSize, // table的大小\n    data: this.dataList,  // table需要的数据\n  }\n  return (\n    <el-table ref=\"multipleTable\"\n      {...{ props }}  // 属性绑定\n      v-loading={this.tableLoading} // table的loading\n      on-selection-change={this.changeFun}  // 选中某行的回调\n      on-select-all={this.selectAll}> // 选中所有行的回调\n      {this.columns.map(item => this.renderTableColumn(item))} // 遍历每一列\n    </el-table>\n  )\n},\n```\n> **renderTable主要思路就是**：先配好 table 的属性 `props` ，return 里返回 table 的结构，结构里 `绑定属性和方法` 。里面的每一列用 `mpa` 函数遍历，再用 `renderTableColumn` 渲染。\n\n### renderTableColumn\n渲染列的render函数：\n```js\n/**\n  * renderColumn\n  */\nrenderTableColumn (item) {\n  // TableColumn配置的属性\n  const props = {\n    prop: item.desc,\n    label: item.name,\n    align: 'center',\n    key: item.desc,\n    width: item.fixedWidth == undefined ? 'auto' : item.fixedWidth,\n    minWidth: item.width == undefined ? 'auto' : item.width,\n    fixed: item.fixed,\n    showOverflowTooltip: item.tooltip ? true : false,\n    sortable: item.sortable ? 'custom' : false\n  }\n  return (\n    // 这里需要判断当前列(item.type)的属性，如果有type(通常type用于带select选项的列)就展示带type的列。如果没有就展示正常列。\n    item.type\n      ? <el-table-column {...{ props }} type={item.type} selectable={item.selectable}/> // 带type的列\n      : <el-table-column {...{ props }} {...{scopedSlots: { // 不带type的列\n        default: (scope) => {\n          if (item.slot) { \n            // 如果设置了slot，就设置一个插槽并且自带返回值\n            return this.$scopedSlots[item.desc](scope)\n          } else if (item.pic) {\n            // 如果设置了pic，就返回一个img的结构\n            return (<img src={scope.row[item.desc]} style={{width: item.width - 24 + 'px', borderRadius: '5px'}}/>)\n          } else if (item.click) {\n            // 如果带有点击事件的，就设置点击后的回调，还带有filter的回调。\n            return (<div style={item.style} onClick={this.btnClickfunc.bind(item, scope.row, item.desc)}>{item.filter ? item.filterFun(scope.row) : scope.row[item.desc]}</div>)\n          } else {\n            // 除去以上几种，普通的都直接返回通用的dom结构，带tooltip、filter的回调。\n            return (<div style={item.tooltip ? {...this.tooltip, ...item.style} : item.style}>{item.filter ? item.filterFun(scope.row) : scope.row[item.desc]}</div>)\n          }\n        }\n      }}}/>\n  )\n},\n```\n> **renderTableColumn主要思路就是**：首先每一列的信息进来先看有没有带type，常见的就是带选择框的（也就是type=\"selection\"）的，如果是就展示带type的列，如果不是就正常列。\n\n> 正常列里面如果是带有插槽属性的，就设置一个插槽并传递参数（插槽相关知识可以参考[这篇](https://www.jianshu.com/p/3af8552449fb)）；\n如果设置了本列需要展示pic，就返回一个img结构；\n如果设置带有点击事件，那就返回一个带有点击回调的结构；\n其余的都返回正常结构，并带有tooltip、filter的回调。\n\n### renderPage\n渲染分页组件的render函数：\n```js\n/**\n  * renderPage\n  */\nrenderPage () {\n  const props = {\n    background: true,\n    small: this.pageSmall,\n    currentPage: this.currentPage,\n    pageSizes: [15, 30, 60, 120],\n    pageSize: this.pageSize,\n    total: this.total,\n    layout: 'total, sizes, prev, pager, next, jumper'\n  }\n  return (\n    <el-pagination {...{ props }} on-current-change={this.handleCurrentChange} on-size-change={this.handleSizeChange} style={this.pageStyle}/>\n  )\n},\n```\n> 同样的思路：设置props，绑定属性和方法。\n\n### 数据加载\n结构大概搭好之后考虑一下数据问题，默认是主动加载数据的，但也有不需要一加载组件就请求数据的，所以我们在mounted函数内以 `isInit` 属性按需请求，下面是 `loadData` 函数：\n```js\n/**\n  * 数据加载\n  */\nloadData () {\n  this.tableLoading = true  // table的loading\n  const param = this.showPagination // 分页信息\n    ? { page: this.currentPage, size: this.pageSize }\n    : ''\n  if (this.data && this.data instanceof Array) { // 如果数据是数组就直接赋值给dataList\n    this.tableLoading = false\n    this.dataList = this.data\n    // 调用初始化拖动方法\n    this.dragInit()\n  } else {\n     // 如果data是一个返回值是promise的函数，就调用并then。\n    const result = this.data(param)\n    if ((typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function') {\n      result.then(rsp => {\n        // 处理数据，给table组件、给分页组件\n        this.currentPage = rsp.data.currentPage\n        this.total = rsp.data.totalElement\n        this.tableLoading = false\n        this.dataList = rsp.data.list\n        // 如果父组件需要返回值就发送过去\n        if (this.needData) {\n          this.$emit('allBackData', rsp.data)\n          this.$emit('backData', rsp.data.list, this.currentPage, this.pageSize)\n        }\n        // 调用初始化拖动方法\n        this.dragInit()\n      })\n    }\n  }\n},\n```\n> 采用组件内调用获取数据方法是因为，基本在和后端小伙伴定义数据结构的时候就统一了 table 和 pagination 的结构，所以在组件内部统一过滤数据可以让调用者代码更简洁，如果调用者需要返回值则可以设置属性。\n\n### 拖动功能\n拖动要引入 `import Sortable from 'sortablejs'` ，父组件调用时如果设置了 `drag` 那么组件内将初始化拖动功能。看一下初始化拖动的方法：\n```js\n/**\n  * 设置拖动\n  */\nsetSort () {\n  const el = this.$refs.multipleTable.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n  if (this.drag && !this.sortable) {  // 如果没有创建sortable则创建\n    this.sortable = Sortable.create(el, {\n      ghostClass: 'sortable-ghost', // Class name for the drop placeholder,\n      setData (dataTransfer) {\n        dataTransfer.setData('Text', '')\n      },\n      onEnd: evt => { // 拖动后\n        const tempIndex = this.newList.splice(evt.oldIndex, 1)[0] // 获取当前拖动选项的id\n        this.newList.splice(evt.newIndex, 0, tempIndex) // 在新列表里的新位置插入拖动选项的id\n        this.$emit('newSort', this.newList)  // 发送给父组件新列表\n\n        // 拖动后需同步table内data数据\n        this.dataList.splice(evt.newIndex, 0, this.dataList.splice(evt.oldIndex, 1)[0]) // 在tableList的新位置插入拖动选项的数据\n        let newArray = this.dataList.slice(0)\n        this.dataList = []\n        this.$nextTick(() => {\n          this.dataList = newArray  // 重新赋值给dataList\n        })\n      }\n    })\n  } else if (!this.drag && this.sortable) { // 如果不需要拖动 但是创建过sortable 那就销毁\n    this.sortable.destroy()\n    this.sortable = null\n  }\n},\n```\n拖动后首先获取到当前拖动项的id，放到列表的新位置上，发送给父组件。\n之后table的数据也需要同步顺序，把当前拖动项的数据放到新的位置上返回一个新的数组，等到dom结构更新完成之后，重新赋值给dataList，这样就可以保证看到列表的顺序和实际的顺序是一样的。\n\n### 数据更新\n有一些业务场景需要更新table的数据，所以组件里写了一个 `refresh` 的方法，方便父组件更新数据。\n```js\n/**\n  * 表格重新加载方法\n  * 如果参数为 true, 则强制刷新到第一页\n  * @param Boolean bool\n  */\nrefresh (bool = false) {\n  if (bool) {\n    this.currentPage = 1\n  }\n  this.loadData()\n},\n```\n\n## 总结\n整体思路大概就是这样，其中的一些逻辑也是根据后来业务需求加上的，还有一些分页、框选等相关方法这里没过多解释，完整代码[戳这里](https://github.com/Yu-Lxy/element-admin/blob/master/src/components/table/index.js)。","source":"_posts/sTable.md","raw":"---\ntitle: 后台管理系统element-admin——二次封装Table组件\ndate: 2020-09-09 14:34:51\ntags: vue\ncategories: vue\n---\n\n## Start\n项目中使用表格灰常的频繁👿，所以一个简洁的表格组件，既能让代码变得优雅还可以省去很多重复的操作。\n<!-- more -->\n\n## element封装调用\nelement-ui已经为我们封装好了一层，这是element-ui的写法：\n``` js\n<template>\n  <el-table\n    :data=\"tableData\"\n    style=\"width: 500px\">\n    <el-table-column prop=\"name\" label=\"姓名\" width=\"180\"></el-table-column>\n    <el-table-column label=\"日期\" width=\"120\">\n      <template slot-scope=\"scope\">{{ '加个前缀😝' + scope.row.date }}</template>\n    </el-table-column>\n    <el-table-column fixed=\"right\" label=\"操作\" width=\"120\">\n      <template slot-scope=\"scope\">\n        <el-button @click.native.prevent=\"deleteRow(scope.$index, tableData)\" type=\"text\" size=\"small\">\n          移除\n        </el-button>\n      </template>\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        },{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }]\n      }\n    },\n    methods: {\n      deleteRow(index, rows) {\n        rows.splice(index, 1)\n      }\n    }\n  }\n</script>\n```\n![element-table](sTable/table1.png)\n\n虽然已经封装的很好了，但感觉还是不够简洁，并且还想将分页功能、loading功能、拖动功能都通过配置参数的方式来选择是否调用，所以进行了二次封装，看一下封装过后的调用代码：\n\n## 二次封装后调用\n\n``` js\n<template>\n  <s-table ref=\"sTable\" :data=\"loadData\" :columns=\"columns\">\n    <div slot=\"action\" slot-scope=\"{row}\">\n      <el-button type=\"primary\" @click=\"deleteRow(row)\">移除</el-button>\n    </div>\n  </s-table>\n<template>\n\n<script>\nimport STable from '@/components/table/index'\nexport default {\n  components: {\n    STable\n  },\n  data () {\n    return {\n      columns: [\n        {name: '姓名', desc: 'name', width: '100'},\n        {name: '日期', desc: 'date', width: '220', filter: true, filterFun: (row) => { return `加个前缀😝 ${row.date}` }},\n        {name: '操作', desc: 'action', width: '320', slot: true, fixed: 'right'}\n      ],\n    }\n  },\n  methods: {\n    loadData: param => {\n      return getData()\n        .then(res => {\n          return res\n        })\n    }\n  }\n}\n</script>\n```\n![s-table](sTable/table2.png)\n\n引入组件之后，table的数据由组件内部主动调用并返回，表格的每一列不再是 `el-table-column` 标签，而是由 `columns` 数组传递每一列信息，还包括了 `loading、pagination` 组件的逻辑，不用每次都处理同样的逻辑了。其中还包含了拖拽排序、选中操作等常用的功能。\n\n## 开始写\n下面看一下二次封装table组件的思路吧~\n\n### JSX写法\n`JSX` 就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 `<` ，JSX就当HTML解析，遇到 `{` 就当JavaScript解析。\n我为什么用jsx呢？一方面是之前的一版template写法写的实在是看着很\"chou\"，另一方面想学习jsx语法和render函数[官方文档看这里](https://cn.vuejs.org/v2/guide/render-function.html)。\n\n### 主思路\n> 从结构上来看，主要分为两部分：`table` 和 `pagination` ，而 `table` 中又有 `column` 。\n\n> 其次就是数据的加载和过滤，默认主动调用数据加载，统一处理好数据结构（`table` 所需的 `list` ，分页组件所需的数据等）后，按需返回。\n\n> 拖动功能的初始化和处理。\n\n> table数据的更新机制。\n\n-----------\n\n所以主结构是这样的：\n```js\nrender () {\n  return (\n    <div>\n      { this.renderTable() }\n      { this.renderPage() }\n    </div>\n  )\n}\n```\n因为分页组件根据外部props属性决定使用或者不使用，并且有一些自定义样式，所以改成这样：\n```js\nrender () {\n  return (\n    <div>\n      { this.renderTable() }\n      <div style={this.pageClass}>{ this.showPagination ? this.renderPage() : '' }</div>\n    </div>\n  )\n}\n```\n### renderTable\n下面看一下 `renderTable` 中是怎么写的：\n```js\n/**\n  * renderTable\n  */\nrenderTable () {\n  const props = {\n    border: true, // table的边框\n    size: this.tableSize, // table的大小\n    data: this.dataList,  // table需要的数据\n  }\n  return (\n    <el-table ref=\"multipleTable\"\n      {...{ props }}  // 属性绑定\n      v-loading={this.tableLoading} // table的loading\n      on-selection-change={this.changeFun}  // 选中某行的回调\n      on-select-all={this.selectAll}> // 选中所有行的回调\n      {this.columns.map(item => this.renderTableColumn(item))} // 遍历每一列\n    </el-table>\n  )\n},\n```\n> **renderTable主要思路就是**：先配好 table 的属性 `props` ，return 里返回 table 的结构，结构里 `绑定属性和方法` 。里面的每一列用 `mpa` 函数遍历，再用 `renderTableColumn` 渲染。\n\n### renderTableColumn\n渲染列的render函数：\n```js\n/**\n  * renderColumn\n  */\nrenderTableColumn (item) {\n  // TableColumn配置的属性\n  const props = {\n    prop: item.desc,\n    label: item.name,\n    align: 'center',\n    key: item.desc,\n    width: item.fixedWidth == undefined ? 'auto' : item.fixedWidth,\n    minWidth: item.width == undefined ? 'auto' : item.width,\n    fixed: item.fixed,\n    showOverflowTooltip: item.tooltip ? true : false,\n    sortable: item.sortable ? 'custom' : false\n  }\n  return (\n    // 这里需要判断当前列(item.type)的属性，如果有type(通常type用于带select选项的列)就展示带type的列。如果没有就展示正常列。\n    item.type\n      ? <el-table-column {...{ props }} type={item.type} selectable={item.selectable}/> // 带type的列\n      : <el-table-column {...{ props }} {...{scopedSlots: { // 不带type的列\n        default: (scope) => {\n          if (item.slot) { \n            // 如果设置了slot，就设置一个插槽并且自带返回值\n            return this.$scopedSlots[item.desc](scope)\n          } else if (item.pic) {\n            // 如果设置了pic，就返回一个img的结构\n            return (<img src={scope.row[item.desc]} style={{width: item.width - 24 + 'px', borderRadius: '5px'}}/>)\n          } else if (item.click) {\n            // 如果带有点击事件的，就设置点击后的回调，还带有filter的回调。\n            return (<div style={item.style} onClick={this.btnClickfunc.bind(item, scope.row, item.desc)}>{item.filter ? item.filterFun(scope.row) : scope.row[item.desc]}</div>)\n          } else {\n            // 除去以上几种，普通的都直接返回通用的dom结构，带tooltip、filter的回调。\n            return (<div style={item.tooltip ? {...this.tooltip, ...item.style} : item.style}>{item.filter ? item.filterFun(scope.row) : scope.row[item.desc]}</div>)\n          }\n        }\n      }}}/>\n  )\n},\n```\n> **renderTableColumn主要思路就是**：首先每一列的信息进来先看有没有带type，常见的就是带选择框的（也就是type=\"selection\"）的，如果是就展示带type的列，如果不是就正常列。\n\n> 正常列里面如果是带有插槽属性的，就设置一个插槽并传递参数（插槽相关知识可以参考[这篇](https://www.jianshu.com/p/3af8552449fb)）；\n如果设置了本列需要展示pic，就返回一个img结构；\n如果设置带有点击事件，那就返回一个带有点击回调的结构；\n其余的都返回正常结构，并带有tooltip、filter的回调。\n\n### renderPage\n渲染分页组件的render函数：\n```js\n/**\n  * renderPage\n  */\nrenderPage () {\n  const props = {\n    background: true,\n    small: this.pageSmall,\n    currentPage: this.currentPage,\n    pageSizes: [15, 30, 60, 120],\n    pageSize: this.pageSize,\n    total: this.total,\n    layout: 'total, sizes, prev, pager, next, jumper'\n  }\n  return (\n    <el-pagination {...{ props }} on-current-change={this.handleCurrentChange} on-size-change={this.handleSizeChange} style={this.pageStyle}/>\n  )\n},\n```\n> 同样的思路：设置props，绑定属性和方法。\n\n### 数据加载\n结构大概搭好之后考虑一下数据问题，默认是主动加载数据的，但也有不需要一加载组件就请求数据的，所以我们在mounted函数内以 `isInit` 属性按需请求，下面是 `loadData` 函数：\n```js\n/**\n  * 数据加载\n  */\nloadData () {\n  this.tableLoading = true  // table的loading\n  const param = this.showPagination // 分页信息\n    ? { page: this.currentPage, size: this.pageSize }\n    : ''\n  if (this.data && this.data instanceof Array) { // 如果数据是数组就直接赋值给dataList\n    this.tableLoading = false\n    this.dataList = this.data\n    // 调用初始化拖动方法\n    this.dragInit()\n  } else {\n     // 如果data是一个返回值是promise的函数，就调用并then。\n    const result = this.data(param)\n    if ((typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function') {\n      result.then(rsp => {\n        // 处理数据，给table组件、给分页组件\n        this.currentPage = rsp.data.currentPage\n        this.total = rsp.data.totalElement\n        this.tableLoading = false\n        this.dataList = rsp.data.list\n        // 如果父组件需要返回值就发送过去\n        if (this.needData) {\n          this.$emit('allBackData', rsp.data)\n          this.$emit('backData', rsp.data.list, this.currentPage, this.pageSize)\n        }\n        // 调用初始化拖动方法\n        this.dragInit()\n      })\n    }\n  }\n},\n```\n> 采用组件内调用获取数据方法是因为，基本在和后端小伙伴定义数据结构的时候就统一了 table 和 pagination 的结构，所以在组件内部统一过滤数据可以让调用者代码更简洁，如果调用者需要返回值则可以设置属性。\n\n### 拖动功能\n拖动要引入 `import Sortable from 'sortablejs'` ，父组件调用时如果设置了 `drag` 那么组件内将初始化拖动功能。看一下初始化拖动的方法：\n```js\n/**\n  * 设置拖动\n  */\nsetSort () {\n  const el = this.$refs.multipleTable.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n  if (this.drag && !this.sortable) {  // 如果没有创建sortable则创建\n    this.sortable = Sortable.create(el, {\n      ghostClass: 'sortable-ghost', // Class name for the drop placeholder,\n      setData (dataTransfer) {\n        dataTransfer.setData('Text', '')\n      },\n      onEnd: evt => { // 拖动后\n        const tempIndex = this.newList.splice(evt.oldIndex, 1)[0] // 获取当前拖动选项的id\n        this.newList.splice(evt.newIndex, 0, tempIndex) // 在新列表里的新位置插入拖动选项的id\n        this.$emit('newSort', this.newList)  // 发送给父组件新列表\n\n        // 拖动后需同步table内data数据\n        this.dataList.splice(evt.newIndex, 0, this.dataList.splice(evt.oldIndex, 1)[0]) // 在tableList的新位置插入拖动选项的数据\n        let newArray = this.dataList.slice(0)\n        this.dataList = []\n        this.$nextTick(() => {\n          this.dataList = newArray  // 重新赋值给dataList\n        })\n      }\n    })\n  } else if (!this.drag && this.sortable) { // 如果不需要拖动 但是创建过sortable 那就销毁\n    this.sortable.destroy()\n    this.sortable = null\n  }\n},\n```\n拖动后首先获取到当前拖动项的id，放到列表的新位置上，发送给父组件。\n之后table的数据也需要同步顺序，把当前拖动项的数据放到新的位置上返回一个新的数组，等到dom结构更新完成之后，重新赋值给dataList，这样就可以保证看到列表的顺序和实际的顺序是一样的。\n\n### 数据更新\n有一些业务场景需要更新table的数据，所以组件里写了一个 `refresh` 的方法，方便父组件更新数据。\n```js\n/**\n  * 表格重新加载方法\n  * 如果参数为 true, 则强制刷新到第一页\n  * @param Boolean bool\n  */\nrefresh (bool = false) {\n  if (bool) {\n    this.currentPage = 1\n  }\n  this.loadData()\n},\n```\n\n## 总结\n整体思路大概就是这样，其中的一些逻辑也是根据后来业务需求加上的，还有一些分页、框选等相关方法这里没过多解释，完整代码[戳这里](https://github.com/Yu-Lxy/element-admin/blob/master/src/components/table/index.js)。","slug":"sTable","published":1,"updated":"2020-09-20T08:46:37.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh945cr20016773zgaepj1vn","content":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>项目中使用表格灰常的频繁👿，所以一个简洁的表格组件，既能让代码变得优雅还可以省去很多重复的操作。<br><a id=\"more\"></a></p>\n<h2 id=\"element封装调用\"><a href=\"#element封装调用\" class=\"headerlink\" title=\"element封装调用\"></a>element封装调用</h2><p>element-ui已经为我们封装好了一层，这是element-ui的写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-table</span><br><span class=\"line\">    :data=<span class=\"string\">\"tableData\"</span></span><br><span class=\"line\">    style=<span class=\"string\">\"width: 500px\"</span>&gt;</span><br><span class=\"line\">    &lt;el-table-column prop=<span class=\"string\">\"name\"</span> label=<span class=\"string\">\"姓名\"</span> width=<span class=\"string\">\"180\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span></span><br><span class=\"line\">    &lt;el-table-column label=\"日期\" width=\"120\"&gt;</span><br><span class=\"line\">      &lt;template slot-scope=\"scope\"&gt;&#123;&#123; '加个前缀😝' + scope.row.date &#125;&#125;&lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-table-column&gt;</span><br><span class=\"line\">    &lt;el-table-column fixed=\"right\" label=\"操作\" width=\"120\"&gt;</span><br><span class=\"line\">      &lt;template slot-scope=\"scope\"&gt;</span><br><span class=\"line\">        &lt;el-button @click.native.prevent=\"deleteRow(scope.$index, tableData)\" type=\"text\" size=\"small\"&gt;</span><br><span class=\"line\">          移除</span><br><span class=\"line\">        &lt;/el-button&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-table-column&gt;</span><br><span class=\"line\">  &lt;/el-table&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        tableData: [&#123;</span><br><span class=\"line\">          date: '2016-05-02',</span><br><span class=\"line\">          name: '王小虎',</span><br><span class=\"line\">          address: '上海市普陀区金沙江路 1518 弄'</span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">          date: '2016-05-02',</span><br><span class=\"line\">          name: '王小虎',</span><br><span class=\"line\">          address: '上海市普陀区金沙江路 1518 弄'</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      deleteRow(index, rows) &#123;</span><br><span class=\"line\">        rows.splice(index, 1)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2020/09/09/sTable/table1.png\" alt=\"element-table\"></p>\n<p>虽然已经封装的很好了，但感觉还是不够简洁，并且还想将分页功能、loading功能、拖动功能都通过配置参数的方式来选择是否调用，所以进行了二次封装，看一下封装过后的调用代码：</p>\n<h2 id=\"二次封装后调用\"><a href=\"#二次封装后调用\" class=\"headerlink\" title=\"二次封装后调用\"></a>二次封装后调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;s-table ref=<span class=\"string\">\"sTable\"</span> :data=<span class=\"string\">\"loadData\"</span> :columns=<span class=\"string\">\"columns\"</span>&gt;</span><br><span class=\"line\">    &lt;div slot=<span class=\"string\">\"action\"</span> slot-scope=<span class=\"string\">\"&#123;row&#125;\"</span>&gt;</span><br><span class=\"line\">      &lt;el-button type=<span class=\"string\">\"primary\"</span> @click=<span class=\"string\">\"deleteRow(row)\"</span>&gt;移除&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/s-table&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import STable from '@/</span>components/table/index<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">export default &#123;</span></span><br><span class=\"line\"><span class=\"string\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    STable</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      columns: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;name: '</span>姓名<span class=\"string\">', desc: '</span>name<span class=\"string\">', width: '</span><span class=\"number\">100</span><span class=\"string\">'&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;name: '</span>日期<span class=\"string\">', desc: '</span>date<span class=\"string\">', width: '</span><span class=\"number\">220</span><span class=\"string\">', filter: true, filterFun: (row) =&gt; &#123; return `加个前缀😝 $&#123;row.date&#125;` &#125;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;name: '</span>操作<span class=\"string\">', desc: '</span>action<span class=\"string\">', width: '</span><span class=\"number\">320</span><span class=\"string\">', slot: true, fixed: '</span>right<span class=\"string\">'&#125;</span></span><br><span class=\"line\"><span class=\"string\">      ],</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    loadData: param =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">      return getData()</span></span><br><span class=\"line\"><span class=\"string\">        .then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return res</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/09/sTable/table2.png\" alt=\"s-table\"></p>\n<p>引入组件之后，table的数据由组件内部主动调用并返回，表格的每一列不再是 <code>el-table-column</code> 标签，而是由 <code>columns</code> 数组传递每一列信息，还包括了 <code>loading、pagination</code> 组件的逻辑，不用每次都处理同样的逻辑了。其中还包含了拖拽排序、选中操作等常用的功能。</p>\n<h2 id=\"开始写\"><a href=\"#开始写\" class=\"headerlink\" title=\"开始写\"></a>开始写</h2><p>下面看一下二次封装table组件的思路吧~</p>\n<h3 id=\"JSX写法\"><a href=\"#JSX写法\" class=\"headerlink\" title=\"JSX写法\"></a>JSX写法</h3><p><code>JSX</code> 就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 <code>&lt;</code> ，JSX就当HTML解析，遇到 <code>{</code> 就当JavaScript解析。<br>我为什么用jsx呢？一方面是之前的一版template写法写的实在是看着很”chou”，另一方面想学习jsx语法和render函数<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">官方文档看这里</a>。</p>\n<h3 id=\"主思路\"><a href=\"#主思路\" class=\"headerlink\" title=\"主思路\"></a>主思路</h3><blockquote>\n<p>从结构上来看，主要分为两部分：<code>table</code> 和 <code>pagination</code> ，而 <code>table</code> 中又有 <code>column</code> 。</p>\n</blockquote>\n<blockquote>\n<p>其次就是数据的加载和过滤，默认主动调用数据加载，统一处理好数据结构（<code>table</code> 所需的 <code>list</code> ，分页组件所需的数据等）后，按需返回。</p>\n</blockquote>\n<blockquote>\n<p>拖动功能的初始化和处理。</p>\n</blockquote>\n<blockquote>\n<p>table数据的更新机制。</p>\n</blockquote>\n<hr>\n<p>所以主结构是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderTable() &#125;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderPage() &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>因为分页组件根据外部props属性决定使用或者不使用，并且有一些自定义样式，所以改成这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderTable() &#125;</span><br><span class=\"line\">      &lt;div style=&#123;<span class=\"keyword\">this</span>.pageClass&#125;&gt;&#123; <span class=\"keyword\">this</span>.showPagination ? <span class=\"keyword\">this</span>.renderPage() : <span class=\"string\">''</span> &#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"renderTable\"><a href=\"#renderTable\" class=\"headerlink\" title=\"renderTable\"></a>renderTable</h3><p>下面看一下 <code>renderTable</code> 中是怎么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * renderTable</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">renderTable () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">    border: <span class=\"literal\">true</span>, <span class=\"comment\">// table的边框</span></span><br><span class=\"line\">    size: <span class=\"keyword\">this</span>.tableSize, <span class=\"comment\">// table的大小</span></span><br><span class=\"line\">    data: <span class=\"keyword\">this</span>.dataList,  <span class=\"comment\">// table需要的数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;el-table ref=<span class=\"string\">\"multipleTable\"</span></span><br><span class=\"line\">      &#123;...&#123; props &#125;&#125;  <span class=\"comment\">// 属性绑定</span></span><br><span class=\"line\">      v-loading=&#123;<span class=\"keyword\">this</span>.tableLoading&#125; <span class=\"comment\">// table的loading</span></span><br><span class=\"line\">      on-selection-change=&#123;<span class=\"keyword\">this</span>.changeFun&#125;  <span class=\"comment\">// 选中某行的回调</span></span><br><span class=\"line\">      on-select-all=&#123;<span class=\"keyword\">this</span>.selectAll&#125;&gt; <span class=\"comment\">// 选中所有行的回调</span></span><br><span class=\"line\">      &#123;<span class=\"keyword\">this</span>.columns.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">this</span>.renderTableColumn(item))&#125; <span class=\"comment\">// 遍历每一列</span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/el-table&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>renderTable主要思路就是</strong>：先配好 table 的属性 <code>props</code> ，return 里返回 table 的结构，结构里 <code>绑定属性和方法</code> 。里面的每一列用 <code>mpa</code> 函数遍历，再用 <code>renderTableColumn</code> 渲染。</p>\n</blockquote>\n<h3 id=\"renderTableColumn\"><a href=\"#renderTableColumn\" class=\"headerlink\" title=\"renderTableColumn\"></a>renderTableColumn</h3><p>渲染列的render函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * renderColumn</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">renderTableColumn (item) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TableColumn配置的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">    prop: item.desc,</span><br><span class=\"line\">    label: item.name,</span><br><span class=\"line\">    align: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">    key: item.desc,</span><br><span class=\"line\">    width: item.fixedWidth == <span class=\"literal\">undefined</span> ? <span class=\"string\">'auto'</span> : item.fixedWidth,</span><br><span class=\"line\">    minWidth: item.width == <span class=\"literal\">undefined</span> ? <span class=\"string\">'auto'</span> : item.width,</span><br><span class=\"line\">    fixed: item.fixed,</span><br><span class=\"line\">    showOverflowTooltip: item.tooltip ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    sortable: item.sortable ? <span class=\"string\">'custom'</span> : <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 这里需要判断当前列(item.type)的属性，如果有type(通常type用于带select选项的列)就展示带type的列。如果没有就展示正常列。</span></span><br><span class=\"line\">    item.type</span><br><span class=\"line\">      ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> &#123;<span class=\"attr\">...</span>&#123; <span class=\"attr\">props</span> &#125;&#125; <span class=\"attr\">type</span>=<span class=\"string\">&#123;item.type&#125;</span> <span class=\"attr\">selectable</span>=<span class=\"string\">&#123;item.selectable&#125;/</span>&gt;</span> // 带type的列</span></span><br><span class=\"line\">      : &lt;el-table-column &#123;...&#123; props &#125;&#125; &#123;...&#123;scopedSlots: &#123; // 不带type的列</span><br><span class=\"line\">        default: (scope) =&gt; &#123;</span><br><span class=\"line\">          if (item.slot) &#123; </span><br><span class=\"line\">            // 如果设置了slot，就设置一个插槽并且自带返回值</span><br><span class=\"line\">            return this.$scopedSlots[item.desc](scope)</span><br><span class=\"line\">          &#125; else if (item.pic) &#123;</span><br><span class=\"line\">            // 如果设置了pic，就返回一个img的结构</span><br><span class=\"line\">            return (&lt;img src=&#123;scope.row[item.desc]&#125; style=&#123;&#123;width: item.width - 24 + 'px', borderRadius: '5px'&#125;&#125;/&gt;)</span><br><span class=\"line\">          &#125; else if (item.click) &#123;</span><br><span class=\"line\">            // 如果带有点击事件的，就设置点击后的回调，还带有filter的回调。</span><br><span class=\"line\">            return (&lt;div style=&#123;item.style&#125; onClick=&#123;this.btnClickfunc.bind(item, scope.row, item.desc)&#125;&gt;&#123;item.filter ? item.filterFun(scope.row) : scope.row[item.desc]&#125;&lt;/div&gt;)</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            // 除去以上几种，普通的都直接返回通用的dom结构，带tooltip、filter的回调。</span><br><span class=\"line\">            return (&lt;div style=&#123;item.tooltip ? &#123;...this.tooltip, ...item.style&#125; : item.style&#125;&gt;&#123;item.filter ? item.filterFun(scope.row) : scope.row[item.desc]&#125;&lt;/div&gt;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;&#125;&#125;/&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>renderTableColumn主要思路就是</strong>：首先每一列的信息进来先看有没有带type，常见的就是带选择框的（也就是type=”selection”）的，如果是就展示带type的列，如果不是就正常列。</p>\n</blockquote>\n<blockquote>\n<p>正常列里面如果是带有插槽属性的，就设置一个插槽并传递参数（插槽相关知识可以参考<a href=\"https://www.jianshu.com/p/3af8552449fb\" target=\"_blank\" rel=\"noopener\">这篇</a>）；<br>如果设置了本列需要展示pic，就返回一个img结构；<br>如果设置带有点击事件，那就返回一个带有点击回调的结构；<br>其余的都返回正常结构，并带有tooltip、filter的回调。</p>\n</blockquote>\n<h3 id=\"renderPage\"><a href=\"#renderPage\" class=\"headerlink\" title=\"renderPage\"></a>renderPage</h3><p>渲染分页组件的render函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * renderPage</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">renderPage () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">    background: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    small: <span class=\"keyword\">this</span>.pageSmall,</span><br><span class=\"line\">    currentPage: <span class=\"keyword\">this</span>.currentPage,</span><br><span class=\"line\">    pageSizes: [<span class=\"number\">15</span>, <span class=\"number\">30</span>, <span class=\"number\">60</span>, <span class=\"number\">120</span>],</span><br><span class=\"line\">    pageSize: <span class=\"keyword\">this</span>.pageSize,</span><br><span class=\"line\">    total: <span class=\"keyword\">this</span>.total,</span><br><span class=\"line\">    layout: <span class=\"string\">'total, sizes, prev, pager, next, jumper'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;el-pagination &#123;...&#123; props &#125;&#125; on-current-change=&#123;<span class=\"keyword\">this</span>.handleCurrentChange&#125; on-size-change=&#123;<span class=\"keyword\">this</span>.handleSizeChange&#125; style=&#123;<span class=\"keyword\">this</span>.pageStyle&#125;/&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>同样的思路：设置props，绑定属性和方法。</p>\n</blockquote>\n<h3 id=\"数据加载\"><a href=\"#数据加载\" class=\"headerlink\" title=\"数据加载\"></a>数据加载</h3><p>结构大概搭好之后考虑一下数据问题，默认是主动加载数据的，但也有不需要一加载组件就请求数据的，所以我们在mounted函数内以 <code>isInit</code> 属性按需请求，下面是 <code>loadData</code> 函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 数据加载</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">loadData () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tableLoading = <span class=\"literal\">true</span>  <span class=\"comment\">// table的loading</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> param = <span class=\"keyword\">this</span>.showPagination <span class=\"comment\">// 分页信息</span></span><br><span class=\"line\">    ? &#123; <span class=\"attr\">page</span>: <span class=\"keyword\">this</span>.currentPage, <span class=\"attr\">size</span>: <span class=\"keyword\">this</span>.pageSize &#125;</span><br><span class=\"line\">    : <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.data &amp;&amp; <span class=\"keyword\">this</span>.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123; <span class=\"comment\">// 如果数据是数组就直接赋值给dataList</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tableLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataList = <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    <span class=\"comment\">// 调用初始化拖动方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dragInit()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 如果data是一个返回值是promise的函数，就调用并then。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">this</span>.data(param)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">'function'</span>) &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      result.then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理数据，给table组件、给分页组件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentPage = rsp.data.currentPage</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.total = rsp.data.totalElement</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList = rsp.data.list</span><br><span class=\"line\">        <span class=\"comment\">// 如果父组件需要返回值就发送过去</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.needData) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'allBackData'</span>, rsp.data)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'backData'</span>, rsp.data.list, <span class=\"keyword\">this</span>.currentPage, <span class=\"keyword\">this</span>.pageSize)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 调用初始化拖动方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dragInit()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>采用组件内调用获取数据方法是因为，基本在和后端小伙伴定义数据结构的时候就统一了 table 和 pagination 的结构，所以在组件内部统一过滤数据可以让调用者代码更简洁，如果调用者需要返回值则可以设置属性。</p>\n</blockquote>\n<h3 id=\"拖动功能\"><a href=\"#拖动功能\" class=\"headerlink\" title=\"拖动功能\"></a>拖动功能</h3><p>拖动要引入 <code>import Sortable from &#39;sortablejs&#39;</code> ，父组件调用时如果设置了 <code>drag</code> 那么组件内将初始化拖动功能。看一下初始化拖动的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 设置拖动</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">setSort () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = <span class=\"keyword\">this</span>.$refs.multipleTable.$el.querySelectorAll(<span class=\"string\">'.el-table__body-wrapper &gt; table &gt; tbody'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.drag &amp;&amp; !<span class=\"keyword\">this</span>.sortable) &#123;  <span class=\"comment\">// 如果没有创建sortable则创建</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sortable = Sortable.create(el, &#123;</span><br><span class=\"line\">      ghostClass: <span class=\"string\">'sortable-ghost'</span>, <span class=\"comment\">// Class name for the drop placeholder,</span></span><br><span class=\"line\">      setData (dataTransfer) &#123;</span><br><span class=\"line\">        dataTransfer.setData(<span class=\"string\">'Text'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onEnd: <span class=\"function\"><span class=\"params\">evt</span> =&gt;</span> &#123; <span class=\"comment\">// 拖动后</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> tempIndex = <span class=\"keyword\">this</span>.newList.splice(evt.oldIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>] <span class=\"comment\">// 获取当前拖动选项的id</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.newList.splice(evt.newIndex, <span class=\"number\">0</span>, tempIndex) <span class=\"comment\">// 在新列表里的新位置插入拖动选项的id</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'newSort'</span>, <span class=\"keyword\">this</span>.newList)  <span class=\"comment\">// 发送给父组件新列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拖动后需同步table内data数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList.splice(evt.newIndex, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.dataList.splice(evt.oldIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>]) <span class=\"comment\">// 在tableList的新位置插入拖动选项的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newArray = <span class=\"keyword\">this</span>.dataList.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.dataList = newArray  <span class=\"comment\">// 重新赋值给dataList</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.drag &amp;&amp; <span class=\"keyword\">this</span>.sortable) &#123; <span class=\"comment\">// 如果不需要拖动 但是创建过sortable 那就销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sortable.destroy()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sortable = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>拖动后首先获取到当前拖动项的id，放到列表的新位置上，发送给父组件。<br>之后table的数据也需要同步顺序，把当前拖动项的数据放到新的位置上返回一个新的数组，等到dom结构更新完成之后，重新赋值给dataList，这样就可以保证看到列表的顺序和实际的顺序是一样的。</p>\n<h3 id=\"数据更新\"><a href=\"#数据更新\" class=\"headerlink\" title=\"数据更新\"></a>数据更新</h3><p>有一些业务场景需要更新table的数据，所以组件里写了一个 <code>refresh</code> 的方法，方便父组件更新数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 表格重新加载方法</span></span><br><span class=\"line\"><span class=\"comment\">  * 如果参数为 true, 则强制刷新到第一页</span></span><br><span class=\"line\"><span class=\"comment\">  * @param Boolean bool</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">refresh (bool = <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bool) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentPage = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loadData()</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整体思路大概就是这样，其中的一些逻辑也是根据后来业务需求加上的，还有一些分页、框选等相关方法这里没过多解释，完整代码<a href=\"https://github.com/Yu-Lxy/element-admin/blob/master/src/components/table/index.js\" target=\"_blank\" rel=\"noopener\">戳这里</a>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>项目中使用表格灰常的频繁👿，所以一个简洁的表格组件，既能让代码变得优雅还可以省去很多重复的操作。<br></p>","more":"<p></p>\n<h2 id=\"element封装调用\"><a href=\"#element封装调用\" class=\"headerlink\" title=\"element封装调用\"></a>element封装调用</h2><p>element-ui已经为我们封装好了一层，这是element-ui的写法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-table</span><br><span class=\"line\">    :data=<span class=\"string\">\"tableData\"</span></span><br><span class=\"line\">    style=<span class=\"string\">\"width: 500px\"</span>&gt;</span><br><span class=\"line\">    &lt;el-table-column prop=<span class=\"string\">\"name\"</span> label=<span class=\"string\">\"姓名\"</span> width=<span class=\"string\">\"180\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span></span><br><span class=\"line\">    &lt;el-table-column label=\"日期\" width=\"120\"&gt;</span><br><span class=\"line\">      &lt;template slot-scope=\"scope\"&gt;&#123;&#123; '加个前缀😝' + scope.row.date &#125;&#125;&lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-table-column&gt;</span><br><span class=\"line\">    &lt;el-table-column fixed=\"right\" label=\"操作\" width=\"120\"&gt;</span><br><span class=\"line\">      &lt;template slot-scope=\"scope\"&gt;</span><br><span class=\"line\">        &lt;el-button @click.native.prevent=\"deleteRow(scope.$index, tableData)\" type=\"text\" size=\"small\"&gt;</span><br><span class=\"line\">          移除</span><br><span class=\"line\">        &lt;/el-button&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-table-column&gt;</span><br><span class=\"line\">  &lt;/el-table&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        tableData: [&#123;</span><br><span class=\"line\">          date: '2016-05-02',</span><br><span class=\"line\">          name: '王小虎',</span><br><span class=\"line\">          address: '上海市普陀区金沙江路 1518 弄'</span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">          date: '2016-05-02',</span><br><span class=\"line\">          name: '王小虎',</span><br><span class=\"line\">          address: '上海市普陀区金沙江路 1518 弄'</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      deleteRow(index, rows) &#123;</span><br><span class=\"line\">        rows.splice(index, 1)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2020/09/09/sTable/table1.png\" alt=\"element-table\"></p>\n<p>虽然已经封装的很好了，但感觉还是不够简洁，并且还想将分页功能、loading功能、拖动功能都通过配置参数的方式来选择是否调用，所以进行了二次封装，看一下封装过后的调用代码：</p>\n<h2 id=\"二次封装后调用\"><a href=\"#二次封装后调用\" class=\"headerlink\" title=\"二次封装后调用\"></a>二次封装后调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;s-table ref=<span class=\"string\">\"sTable\"</span> :data=<span class=\"string\">\"loadData\"</span> :columns=<span class=\"string\">\"columns\"</span>&gt;</span><br><span class=\"line\">    &lt;div slot=<span class=\"string\">\"action\"</span> slot-scope=<span class=\"string\">\"&#123;row&#125;\"</span>&gt;</span><br><span class=\"line\">      &lt;el-button type=<span class=\"string\">\"primary\"</span> @click=<span class=\"string\">\"deleteRow(row)\"</span>&gt;移除&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/s-table&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import STable from '@/</span>components/table/index<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">export default &#123;</span></span><br><span class=\"line\"><span class=\"string\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    STable</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      columns: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;name: '</span>姓名<span class=\"string\">', desc: '</span>name<span class=\"string\">', width: '</span><span class=\"number\">100</span><span class=\"string\">'&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;name: '</span>日期<span class=\"string\">', desc: '</span>date<span class=\"string\">', width: '</span><span class=\"number\">220</span><span class=\"string\">', filter: true, filterFun: (row) =&gt; &#123; return `加个前缀😝 $&#123;row.date&#125;` &#125;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;name: '</span>操作<span class=\"string\">', desc: '</span>action<span class=\"string\">', width: '</span><span class=\"number\">320</span><span class=\"string\">', slot: true, fixed: '</span>right<span class=\"string\">'&#125;</span></span><br><span class=\"line\"><span class=\"string\">      ],</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    loadData: param =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">      return getData()</span></span><br><span class=\"line\"><span class=\"string\">        .then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return res</span></span><br><span class=\"line\"><span class=\"string\">        &#125;)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/09/sTable/table2.png\" alt=\"s-table\"></p>\n<p>引入组件之后，table的数据由组件内部主动调用并返回，表格的每一列不再是 <code>el-table-column</code> 标签，而是由 <code>columns</code> 数组传递每一列信息，还包括了 <code>loading、pagination</code> 组件的逻辑，不用每次都处理同样的逻辑了。其中还包含了拖拽排序、选中操作等常用的功能。</p>\n<h2 id=\"开始写\"><a href=\"#开始写\" class=\"headerlink\" title=\"开始写\"></a>开始写</h2><p>下面看一下二次封装table组件的思路吧~</p>\n<h3 id=\"JSX写法\"><a href=\"#JSX写法\" class=\"headerlink\" title=\"JSX写法\"></a>JSX写法</h3><p><code>JSX</code> 就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 <code>&lt;</code> ，JSX就当HTML解析，遇到 <code>{</code> 就当JavaScript解析。<br>我为什么用jsx呢？一方面是之前的一版template写法写的实在是看着很”chou”，另一方面想学习jsx语法和render函数<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">官方文档看这里</a>。</p>\n<h3 id=\"主思路\"><a href=\"#主思路\" class=\"headerlink\" title=\"主思路\"></a>主思路</h3><blockquote>\n<p>从结构上来看，主要分为两部分：<code>table</code> 和 <code>pagination</code> ，而 <code>table</code> 中又有 <code>column</code> 。</p>\n</blockquote>\n<blockquote>\n<p>其次就是数据的加载和过滤，默认主动调用数据加载，统一处理好数据结构（<code>table</code> 所需的 <code>list</code> ，分页组件所需的数据等）后，按需返回。</p>\n</blockquote>\n<blockquote>\n<p>拖动功能的初始化和处理。</p>\n</blockquote>\n<blockquote>\n<p>table数据的更新机制。</p>\n</blockquote>\n<hr>\n<p>所以主结构是这样的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderTable() &#125;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderPage() &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>因为分页组件根据外部props属性决定使用或者不使用，并且有一些自定义样式，所以改成这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.renderTable() &#125;</span><br><span class=\"line\">      &lt;div style=&#123;<span class=\"keyword\">this</span>.pageClass&#125;&gt;&#123; <span class=\"keyword\">this</span>.showPagination ? <span class=\"keyword\">this</span>.renderPage() : <span class=\"string\">''</span> &#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"renderTable\"><a href=\"#renderTable\" class=\"headerlink\" title=\"renderTable\"></a>renderTable</h3><p>下面看一下 <code>renderTable</code> 中是怎么写的：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * renderTable</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">renderTable () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">    border: <span class=\"literal\">true</span>, <span class=\"comment\">// table的边框</span></span><br><span class=\"line\">    size: <span class=\"keyword\">this</span>.tableSize, <span class=\"comment\">// table的大小</span></span><br><span class=\"line\">    data: <span class=\"keyword\">this</span>.dataList,  <span class=\"comment\">// table需要的数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;el-table ref=<span class=\"string\">\"multipleTable\"</span></span><br><span class=\"line\">      &#123;...&#123; props &#125;&#125;  <span class=\"comment\">// 属性绑定</span></span><br><span class=\"line\">      v-loading=&#123;<span class=\"keyword\">this</span>.tableLoading&#125; <span class=\"comment\">// table的loading</span></span><br><span class=\"line\">      on-selection-change=&#123;<span class=\"keyword\">this</span>.changeFun&#125;  <span class=\"comment\">// 选中某行的回调</span></span><br><span class=\"line\">      on-select-all=&#123;<span class=\"keyword\">this</span>.selectAll&#125;&gt; <span class=\"comment\">// 选中所有行的回调</span></span><br><span class=\"line\">      &#123;<span class=\"keyword\">this</span>.columns.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">this</span>.renderTableColumn(item))&#125; <span class=\"comment\">// 遍历每一列</span></span><br><span class=\"line\">    &lt;<span class=\"regexp\">/el-table&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>renderTable主要思路就是</strong>：先配好 table 的属性 <code>props</code> ，return 里返回 table 的结构，结构里 <code>绑定属性和方法</code> 。里面的每一列用 <code>mpa</code> 函数遍历，再用 <code>renderTableColumn</code> 渲染。</p>\n</blockquote>\n<h3 id=\"renderTableColumn\"><a href=\"#renderTableColumn\" class=\"headerlink\" title=\"renderTableColumn\"></a>renderTableColumn</h3><p>渲染列的render函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * renderColumn</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">renderTableColumn (item) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TableColumn配置的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">    prop: item.desc,</span><br><span class=\"line\">    label: item.name,</span><br><span class=\"line\">    align: <span class=\"string\">'center'</span>,</span><br><span class=\"line\">    key: item.desc,</span><br><span class=\"line\">    width: item.fixedWidth == <span class=\"literal\">undefined</span> ? <span class=\"string\">'auto'</span> : item.fixedWidth,</span><br><span class=\"line\">    minWidth: item.width == <span class=\"literal\">undefined</span> ? <span class=\"string\">'auto'</span> : item.width,</span><br><span class=\"line\">    fixed: item.fixed,</span><br><span class=\"line\">    showOverflowTooltip: item.tooltip ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    sortable: item.sortable ? <span class=\"string\">'custom'</span> : <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 这里需要判断当前列(item.type)的属性，如果有type(通常type用于带select选项的列)就展示带type的列。如果没有就展示正常列。</span></span><br><span class=\"line\">    item.type</span><br><span class=\"line\">      ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> &#123;<span class=\"attr\">...</span>&#123; <span class=\"attr\">props</span> &#125;&#125; <span class=\"attr\">type</span>=<span class=\"string\">&#123;item.type&#125;</span> <span class=\"attr\">selectable</span>=<span class=\"string\">&#123;item.selectable&#125;/</span>&gt;</span> // 带type的列</span></span><br><span class=\"line\">      : &lt;el-table-column &#123;...&#123; props &#125;&#125; &#123;...&#123;scopedSlots: &#123; // 不带type的列</span><br><span class=\"line\">        default: (scope) =&gt; &#123;</span><br><span class=\"line\">          if (item.slot) &#123; </span><br><span class=\"line\">            // 如果设置了slot，就设置一个插槽并且自带返回值</span><br><span class=\"line\">            return this.$scopedSlots[item.desc](scope)</span><br><span class=\"line\">          &#125; else if (item.pic) &#123;</span><br><span class=\"line\">            // 如果设置了pic，就返回一个img的结构</span><br><span class=\"line\">            return (&lt;img src=&#123;scope.row[item.desc]&#125; style=&#123;&#123;width: item.width - 24 + 'px', borderRadius: '5px'&#125;&#125;/&gt;)</span><br><span class=\"line\">          &#125; else if (item.click) &#123;</span><br><span class=\"line\">            // 如果带有点击事件的，就设置点击后的回调，还带有filter的回调。</span><br><span class=\"line\">            return (&lt;div style=&#123;item.style&#125; onClick=&#123;this.btnClickfunc.bind(item, scope.row, item.desc)&#125;&gt;&#123;item.filter ? item.filterFun(scope.row) : scope.row[item.desc]&#125;&lt;/div&gt;)</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            // 除去以上几种，普通的都直接返回通用的dom结构，带tooltip、filter的回调。</span><br><span class=\"line\">            return (&lt;div style=&#123;item.tooltip ? &#123;...this.tooltip, ...item.style&#125; : item.style&#125;&gt;&#123;item.filter ? item.filterFun(scope.row) : scope.row[item.desc]&#125;&lt;/div&gt;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;&#125;&#125;/&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong>renderTableColumn主要思路就是</strong>：首先每一列的信息进来先看有没有带type，常见的就是带选择框的（也就是type=”selection”）的，如果是就展示带type的列，如果不是就正常列。</p>\n</blockquote>\n<blockquote>\n<p>正常列里面如果是带有插槽属性的，就设置一个插槽并传递参数（插槽相关知识可以参考<a href=\"https://www.jianshu.com/p/3af8552449fb\" target=\"_blank\" rel=\"noopener\">这篇</a>）；<br>如果设置了本列需要展示pic，就返回一个img结构；<br>如果设置带有点击事件，那就返回一个带有点击回调的结构；<br>其余的都返回正常结构，并带有tooltip、filter的回调。</p>\n</blockquote>\n<h3 id=\"renderPage\"><a href=\"#renderPage\" class=\"headerlink\" title=\"renderPage\"></a>renderPage</h3><p>渲染分页组件的render函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * renderPage</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">renderPage () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = &#123;</span><br><span class=\"line\">    background: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    small: <span class=\"keyword\">this</span>.pageSmall,</span><br><span class=\"line\">    currentPage: <span class=\"keyword\">this</span>.currentPage,</span><br><span class=\"line\">    pageSizes: [<span class=\"number\">15</span>, <span class=\"number\">30</span>, <span class=\"number\">60</span>, <span class=\"number\">120</span>],</span><br><span class=\"line\">    pageSize: <span class=\"keyword\">this</span>.pageSize,</span><br><span class=\"line\">    total: <span class=\"keyword\">this</span>.total,</span><br><span class=\"line\">    layout: <span class=\"string\">'total, sizes, prev, pager, next, jumper'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;el-pagination &#123;...&#123; props &#125;&#125; on-current-change=&#123;<span class=\"keyword\">this</span>.handleCurrentChange&#125; on-size-change=&#123;<span class=\"keyword\">this</span>.handleSizeChange&#125; style=&#123;<span class=\"keyword\">this</span>.pageStyle&#125;/&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>同样的思路：设置props，绑定属性和方法。</p>\n</blockquote>\n<h3 id=\"数据加载\"><a href=\"#数据加载\" class=\"headerlink\" title=\"数据加载\"></a>数据加载</h3><p>结构大概搭好之后考虑一下数据问题，默认是主动加载数据的，但也有不需要一加载组件就请求数据的，所以我们在mounted函数内以 <code>isInit</code> 属性按需请求，下面是 <code>loadData</code> 函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 数据加载</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">loadData () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tableLoading = <span class=\"literal\">true</span>  <span class=\"comment\">// table的loading</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> param = <span class=\"keyword\">this</span>.showPagination <span class=\"comment\">// 分页信息</span></span><br><span class=\"line\">    ? &#123; <span class=\"attr\">page</span>: <span class=\"keyword\">this</span>.currentPage, <span class=\"attr\">size</span>: <span class=\"keyword\">this</span>.pageSize &#125;</span><br><span class=\"line\">    : <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.data &amp;&amp; <span class=\"keyword\">this</span>.data <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123; <span class=\"comment\">// 如果数据是数组就直接赋值给dataList</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tableLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataList = <span class=\"keyword\">this</span>.data</span><br><span class=\"line\">    <span class=\"comment\">// 调用初始化拖动方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dragInit()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 如果data是一个返回值是promise的函数，就调用并then。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">this</span>.data(param)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">'function'</span>) &amp;&amp; <span class=\"keyword\">typeof</span> result.then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      result.then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理数据，给table组件、给分页组件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentPage = rsp.data.currentPage</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.total = rsp.data.totalElement</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableLoading = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList = rsp.data.list</span><br><span class=\"line\">        <span class=\"comment\">// 如果父组件需要返回值就发送过去</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.needData) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'allBackData'</span>, rsp.data)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'backData'</span>, rsp.data.list, <span class=\"keyword\">this</span>.currentPage, <span class=\"keyword\">this</span>.pageSize)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 调用初始化拖动方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dragInit()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>采用组件内调用获取数据方法是因为，基本在和后端小伙伴定义数据结构的时候就统一了 table 和 pagination 的结构，所以在组件内部统一过滤数据可以让调用者代码更简洁，如果调用者需要返回值则可以设置属性。</p>\n</blockquote>\n<h3 id=\"拖动功能\"><a href=\"#拖动功能\" class=\"headerlink\" title=\"拖动功能\"></a>拖动功能</h3><p>拖动要引入 <code>import Sortable from &#39;sortablejs&#39;</code> ，父组件调用时如果设置了 <code>drag</code> 那么组件内将初始化拖动功能。看一下初始化拖动的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 设置拖动</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">setSort () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = <span class=\"keyword\">this</span>.$refs.multipleTable.$el.querySelectorAll(<span class=\"string\">'.el-table__body-wrapper &gt; table &gt; tbody'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.drag &amp;&amp; !<span class=\"keyword\">this</span>.sortable) &#123;  <span class=\"comment\">// 如果没有创建sortable则创建</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sortable = Sortable.create(el, &#123;</span><br><span class=\"line\">      ghostClass: <span class=\"string\">'sortable-ghost'</span>, <span class=\"comment\">// Class name for the drop placeholder,</span></span><br><span class=\"line\">      setData (dataTransfer) &#123;</span><br><span class=\"line\">        dataTransfer.setData(<span class=\"string\">'Text'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      onEnd: <span class=\"function\"><span class=\"params\">evt</span> =&gt;</span> &#123; <span class=\"comment\">// 拖动后</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> tempIndex = <span class=\"keyword\">this</span>.newList.splice(evt.oldIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>] <span class=\"comment\">// 获取当前拖动选项的id</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.newList.splice(evt.newIndex, <span class=\"number\">0</span>, tempIndex) <span class=\"comment\">// 在新列表里的新位置插入拖动选项的id</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'newSort'</span>, <span class=\"keyword\">this</span>.newList)  <span class=\"comment\">// 发送给父组件新列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拖动后需同步table内data数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList.splice(evt.newIndex, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.dataList.splice(evt.oldIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>]) <span class=\"comment\">// 在tableList的新位置插入拖动选项的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newArray = <span class=\"keyword\">this</span>.dataList.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dataList = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.dataList = newArray  <span class=\"comment\">// 重新赋值给dataList</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.drag &amp;&amp; <span class=\"keyword\">this</span>.sortable) &#123; <span class=\"comment\">// 如果不需要拖动 但是创建过sortable 那就销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sortable.destroy()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sortable = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>拖动后首先获取到当前拖动项的id，放到列表的新位置上，发送给父组件。<br>之后table的数据也需要同步顺序，把当前拖动项的数据放到新的位置上返回一个新的数组，等到dom结构更新完成之后，重新赋值给dataList，这样就可以保证看到列表的顺序和实际的顺序是一样的。</p>\n<h3 id=\"数据更新\"><a href=\"#数据更新\" class=\"headerlink\" title=\"数据更新\"></a>数据更新</h3><p>有一些业务场景需要更新table的数据，所以组件里写了一个 <code>refresh</code> 的方法，方便父组件更新数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 表格重新加载方法</span></span><br><span class=\"line\"><span class=\"comment\">  * 如果参数为 true, 则强制刷新到第一页</span></span><br><span class=\"line\"><span class=\"comment\">  * @param Boolean bool</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">refresh (bool = <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bool) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentPage = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loadData()</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整体思路大概就是这样，其中的一些逻辑也是根据后来业务需求加上的，还有一些分页、框选等相关方法这里没过多解释，完整代码<a href=\"https://github.com/Yu-Lxy/element-admin/blob/master/src/components/table/index.js\" target=\"_blank\" rel=\"noopener\">戳这里</a>。</p>"}],"PostAsset":[{"_id":"source/_posts/buildHexo/hexo2.jpg","slug":"hexo2.jpg","post":"ckh945cof0002773zdwz58405","modified":1,"renderable":0},{"_id":"source/_posts/xiumi/1599127298698.jpg","slug":"1599127298698.jpg","post":"ckh945coo000d773zxe1fek0j","modified":1,"renderable":0},{"_id":"source/_posts/element-admin/permission1.png","slug":"permission1.png","post":"ckh945co70000773zaab47rh7","modified":1,"renderable":0},{"_id":"source/_posts/buildHexo/hexo5.jpg","slug":"hexo5.jpg","post":"ckh945cof0002773zdwz58405","modified":1,"renderable":0},{"_id":"source/_posts/element-admin/permission.png","slug":"permission.png","post":"ckh945co70000773zaab47rh7","modified":1,"renderable":0},{"_id":"source/_posts/element-admin/permission2.png","post":"ckh945co70000773zaab47rh7","slug":"permission2.png","modified":1,"renderable":1},{"_id":"source/_posts/buildHexo/hexo1.jpg","slug":"hexo1.jpg","post":"ckh945cof0002773zdwz58405","modified":1,"renderable":0},{"_id":"source/_posts/buildHexo/hexo3.jpg","post":"ckh945cof0002773zdwz58405","slug":"hexo3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/buildHexo/hexo4.jpg","post":"ckh945cof0002773zdwz58405","slug":"hexo4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/sTable/table1.png","post":"ckh945cr20016773zgaepj1vn","slug":"table1.png","modified":1,"renderable":1},{"_id":"source/_posts/sTable/table2.png","post":"ckh945cr20016773zgaepj1vn","slug":"table2.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckh945co70000773zaab47rh7","category_id":"ckh945coh0004773z0c93bwwf","_id":"ckh945cor000f773z05bjiwez"},{"post_id":"ckh945coo000d773zxe1fek0j","category_id":"ckh945coh0004773z0c93bwwf","_id":"ckh945cou000l773z8cv6rdl4"},{"post_id":"ckh945cof0002773zdwz58405","category_id":"ckh945com000a773zi8rahovj","_id":"ckh945cov000o773zhcn5g55g"},{"post_id":"ckh945coj0006773z4l9l8iqd","category_id":"ckh945cor000g773zwxox2zcz","_id":"ckh945cov000q773znsgmxaoy"},{"post_id":"ckh945col0008773zi0c4t2sw","category_id":"ckh945cou000m773z6o9sfsu0","_id":"ckh945cow000u773zae6lx956"},{"post_id":"ckh945com0009773zsj6ijpsq","category_id":"ckh945cov000r773z5c0ywmcv","_id":"ckh945cp00010773zs10x63qm"},{"post_id":"ckh945coq000e773zy28el1gd","category_id":"ckh945cou000m773z6o9sfsu0","_id":"ckh945cp10013773zq8i07kct"},{"post_id":"ckh945cos000j773zusphqk7m","category_id":"ckh945cp0000z773zfospoce6","_id":"ckh945cp20015773zt9hfr1be"},{"post_id":"ckh945cr20016773zgaepj1vn","category_id":"ckh945coh0004773z0c93bwwf","_id":"ckh945cr50018773z4v3yzose"}],"PostTag":[{"post_id":"ckh945co70000773zaab47rh7","tag_id":"ckh945coj0005773zq6y4xabx","_id":"ckh945con000c773zizpk0zui"},{"post_id":"ckh945coo000d773zxe1fek0j","tag_id":"ckh945coj0005773zq6y4xabx","_id":"ckh945cos000i773zgr9vmyte"},{"post_id":"ckh945cof0002773zdwz58405","tag_id":"ckh945con000b773zop81fe35","_id":"ckh945cou000k773zn1majsax"},{"post_id":"ckh945coj0006773z4l9l8iqd","tag_id":"ckh945cor000h773zwvci75ld","_id":"ckh945cov000p773z5two7fcc"},{"post_id":"ckh945col0008773zi0c4t2sw","tag_id":"ckh945cou000n773zmiokjvz7","_id":"ckh945cow000t773zh4siy191"},{"post_id":"ckh945com0009773zsj6ijpsq","tag_id":"ckh945coj0005773zq6y4xabx","_id":"ckh945cp0000x773zlu68h61i"},{"post_id":"ckh945com0009773zsj6ijpsq","tag_id":"ckh945cow000s773zzqhi5vlh","_id":"ckh945cp0000y773zcpkqy75b"},{"post_id":"ckh945coq000e773zy28el1gd","tag_id":"ckh945cou000n773zmiokjvz7","_id":"ckh945cp10012773z87y4yirm"},{"post_id":"ckh945cos000j773zusphqk7m","tag_id":"ckh945cp00011773z6d3ovut7","_id":"ckh945cp10014773zvex40d5o"},{"post_id":"ckh945cr20016773zgaepj1vn","tag_id":"ckh945coj0005773zq6y4xabx","_id":"ckh945cr50017773zxzo6r7q6"}],"Tag":[{"name":"vue","_id":"ckh945coj0005773zq6y4xabx"},{"name":"hexo","_id":"ckh945con000b773zop81fe35"},{"name":"css","_id":"ckh945cor000h773zwvci75ld"},{"name":"js","_id":"ckh945cou000n773zmiokjvz7"},{"name":"koa","_id":"ckh945cow000s773zzqhi5vlh"},{"name":"mongoDB","_id":"ckh945cp00011773z6d3ovut7"}]}}